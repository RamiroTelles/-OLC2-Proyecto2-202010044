Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTBLOCK
    INTERFACE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> declaracion
Rule 6     instruccion -> asignacion PUNTOCOMA
Rule 7     instruccion -> sIf
Rule 8     instruccion -> sWhile
Rule 9     instruccion -> sFor
Rule 10    instruccion -> sContinue
Rule 11    instruccion -> sBreak
Rule 12    instruccion -> sReturn
Rule 13    instruccion -> sSwitch
Rule 14    instruccion -> declaracion_Funcion
Rule 15    instruccion -> callFuncion PUNTOCOMA
Rule 16    instruccion -> argumento_Funcion PUNTOCOMA
Rule 17    argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones
Rule 18    accesoArgumento -> ID PUNTO ID
Rule 19    callFuncion -> ID PARIZQ venir_Expresiones
Rule 20    venir_Expresiones -> lista_Expresiones PARDER
Rule 21    venir_Expresiones -> PARDER
Rule 22    lista_Expresiones -> lista_Expresiones COMA op_Ternario
Rule 23    lista_Expresiones -> op_Ternario
Rule 24    declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
Rule 25    parametros -> PARDER
Rule 26    parametros -> lista_Parametros PARDER
Rule 27    lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo
Rule 28    lista_Parametros -> ID DOSPUNTOS tipo
Rule 29    lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo CORIZQ CORDER
Rule 30    lista_Parametros -> ID DOSPUNTOS tipo CORIZQ CORDER
Rule 31    tipoFuncion -> DOSPUNTOS tipo LLAVIZQ
Rule 32    tipoFuncion -> LLAVIZQ
Rule 33    sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
Rule 34    listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones
Rule 35    listCases -> listCases DEFAULT DOSPUNTOS instrucciones
Rule 36    listCases -> CASE op_Ternario DOSPUNTOS instrucciones
Rule 37    listCases -> DEFAULT DOSPUNTOS instrucciones
Rule 38    sContinue -> CONTINUE PUNTOCOMA
Rule 39    sBreak -> BREAK PUNTOCOMA
Rule 40    sReturn -> RETURN PUNTOCOMA
Rule 41    sReturn -> RETURN op_Ternario PUNTOCOMA
Rule 42    sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
Rule 43    sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
Rule 44    sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
Rule 45    sIf2 -> LLAVDER ELSE sElse
Rule 46    sIf2 -> LLAVDER
Rule 47    sElse -> LLAVIZQ instrucciones LLAVDER
Rule 48    sElse -> sIf
Rule 49    asignacion -> ID IGUAL op_Ternario
Rule 50    asignacion -> ID MAS IGUAL op_Ternario
Rule 51    asignacion -> ID MENOS IGUAL op_Ternario
Rule 52    asignacion -> ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
Rule 53    asignacion -> ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
Rule 54    listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER
Rule 55    listaAccesos -> CORIZQ op_Ternario CORDER
Rule 56    asignacion -> ID MAS MAS
Rule 57    asignacion -> ID MENOS MENOS
Rule 58    declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita
Rule 59    declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
Rule 60    declaracion -> tipoVar ID declaracion_implicita
Rule 61    lista_Corchetes -> lista_Corchetes CORIZQ CORDER
Rule 62    lista_Corchetes -> CORIZQ CORDER
Rule 63    declaracion_explicita -> PUNTOCOMA
Rule 64    declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA
Rule 65    declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA
Rule 66    tipoVar -> VAR
Rule 67    tipoVar -> CONST
Rule 68    tipo -> NUMBER
Rule 69    tipo -> FLOAT
Rule 70    tipo -> STRING
Rule 71    tipo -> BOOLEAN
Rule 72    tipo -> CHAR
Rule 73    imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
Rule 74    lista_exp -> lista_exp COMA op_Ternario
Rule 75    lista_exp -> op_Ternario
Rule 76    op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
Rule 77    op_Ternario -> exp_Or
Rule 78    op_Ternario -> TYPEOF op_Ternario
Rule 79    exp_Or -> exp_Or OR exp_And
Rule 80    exp_Or -> exp_And
Rule 81    exp_And -> exp_And AND exp_Not
Rule 82    exp_And -> exp_Not
Rule 83    exp_Not -> lNot exp_Comp
Rule 84    exp_Not -> exp_Comp
Rule 85    lNot -> lNot NOT
Rule 86    lNot -> NOT
Rule 87    exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
Rule 88    exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos
Rule 89    exp_Comp -> exp_rel
Rule 90    exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos
Rule 91    exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos
Rule 92    exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
Rule 93    exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos
Rule 94    exp_rel -> exp_Sum_Menos
Rule 95    exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div
Rule 96    exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div
Rule 97    exp_Sum_Menos -> exp_Mul_Div
Rule 98    exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis
Rule 99    exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis
Rule 100   exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis
Rule 101   exp_Mul_Div -> exp_Parentesis
Rule 102   exp_Parentesis -> PARIZQ op_Ternario PARDER
Rule 103   exp_Parentesis -> exp_Negativo
Rule 104   exp_Negativo -> MENOS valor
Rule 105   exp_Negativo -> valor
Rule 106   valor -> ENTERO
Rule 107   valor -> CADENA
Rule 108   valor -> DECIMAL
Rule 109   valor -> CARACTER
Rule 110   valor -> TRUE PUNTO ID PARIZQ PARDER
Rule 111   valor -> FALSE PUNTO ID PARIZQ PARDER
Rule 112   valor -> TRUE
Rule 113   valor -> FALSE
Rule 114   valor -> NULL
Rule 115   valor -> ID
Rule 116   valor -> callFuncion
Rule 117   valor -> CORIZQ lista_Expresiones CORDER
Rule 118   valor -> CORIZQ CORDER
Rule 119   valor -> ID CORIZQ op_Ternario CORDER
Rule 120   valor -> ID CORIZQ op_Ternario CORDER listaAccesos
Rule 121   valor -> argumento_Funcion
Rule 122   valor -> accesoArgumento

Terminals, with rules where they appear

AND                  : 81
BOOLEAN              : 71
BREAK                : 39
CADENA               : 107
CARACTER             : 109
CASE                 : 34 36
CHAR                 : 72
COMA                 : 22 27 29 74
COMMENTBLOCK         : 
CONSOLE              : 73
CONST                : 67
CONTINUE             : 38
CORDER               : 29 30 52 53 54 55 61 62 117 118 119 120
CORIZQ               : 29 30 52 53 54 55 61 62 117 118 119 120
DECIMAL              : 108
DEFAULT              : 35 37
DISTINTO             : 88
DIVIDIDO             : 99
DOSPUNTOS            : 27 28 29 30 31 34 35 36 37 58 59 76
ELSE                 : 45
ENTERO               : 106
EQUIVALENTE          : 87
FALSE                : 111 113
FLOAT                : 69
FOR                  : 42
FUNCTION             : 24
ID                   : 17 17 18 18 19 24 27 28 29 30 49 50 51 52 53 56 57 58 59 60 110 111 115 119 120
IF                   : 44
IGUAL                : 49 50 51 52 53 64 65
INTERFACE            : 
INTERROGACION        : 76
LLAVDER              : 24 33 42 43 45 46 47
LLAVIZQ              : 31 32 33 42 43 44 47
LOG                  : 73
MAS                  : 50 56 56 95
MAYOR                : 90
MAYORIGUAL           : 92
MENOR                : 91
MENORIGUAL           : 93
MENOS                : 51 57 57 96 104
MODULO               : 100
NOT                  : 85 86
NULL                 : 114
NUMBER               : 68
OR                   : 79
PARDER               : 20 21 25 26 33 42 43 44 73 102 110 111
PARIZQ               : 17 19 24 33 42 43 44 73 102 110 111
POR                  : 98
PUNTO                : 17 18 73 110 111
PUNTOCOMA            : 6 15 16 38 39 40 41 42 63 64 65 73
RETURN               : 40 41
STRING               : 70
SWITCH               : 33
TRUE                 : 110 112
TYPEOF               : 78
VAR                  : 66
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

accesoArgumento      : 122
argumento_Funcion    : 16 121
asignacion           : 6 42
callFuncion          : 15 116
declaracion          : 5 42
declaracion_Funcion  : 14
declaracion_explicita : 58 59
declaracion_implicita : 60
exp_And              : 79 80 81
exp_Comp             : 83 84
exp_Mul_Div          : 95 96 97 98 99 100
exp_Negativo         : 103
exp_Not              : 81 82
exp_Or               : 76 76 76 77 79
exp_Parentesis       : 98 99 100 101
exp_Sum_Menos        : 87 87 88 88 90 90 91 91 92 92 93 93 94 95 96
exp_rel              : 89
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 24 34 35 36 37 42 43 44 47
lNot                 : 83 85
listCases            : 33 34 35
listaAccesos         : 53 54 120
lista_Corchetes      : 59 61
lista_Expresiones    : 20 22 117
lista_Parametros     : 26 27 29
lista_exp            : 73 74
op_Ternario          : 22 23 33 34 36 41 42 43 44 49 50 51 52 52 53 53 54 55 64 65 74 75 78 102 119 120
parametros           : 24
sBreak               : 11
sContinue            : 10
sElse                : 45
sFor                 : 9
sIf                  : 7 48
sIf2                 : 44
sReturn              : 12
sSwitch              : 13
sWhile               : 8
tipo                 : 27 28 29 30 31 58 59
tipoFuncion          : 24
tipoVar              : 58 59 60
valor                : 104 105
venir_Expresiones    : 17 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    SWITCH          reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    CONST           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
    CASE            reduce using rule 3 (instrucciones -> instruccion .)
    DEFAULT         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    CONSOLE         reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    RETURN          reduce using rule 4 (instruccion -> imprimir_instr .)
    SWITCH          reduce using rule 4 (instruccion -> imprimir_instr .)
    FUNCTION        reduce using rule 4 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONST           reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 4 (instruccion -> imprimir_instr .)
    CASE            reduce using rule 4 (instruccion -> imprimir_instr .)
    DEFAULT         reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> declaracion .

    CONSOLE         reduce using rule 5 (instruccion -> declaracion .)
    ID              reduce using rule 5 (instruccion -> declaracion .)
    IF              reduce using rule 5 (instruccion -> declaracion .)
    WHILE           reduce using rule 5 (instruccion -> declaracion .)
    FOR             reduce using rule 5 (instruccion -> declaracion .)
    CONTINUE        reduce using rule 5 (instruccion -> declaracion .)
    BREAK           reduce using rule 5 (instruccion -> declaracion .)
    RETURN          reduce using rule 5 (instruccion -> declaracion .)
    SWITCH          reduce using rule 5 (instruccion -> declaracion .)
    FUNCTION        reduce using rule 5 (instruccion -> declaracion .)
    VAR             reduce using rule 5 (instruccion -> declaracion .)
    CONST           reduce using rule 5 (instruccion -> declaracion .)
    $end            reduce using rule 5 (instruccion -> declaracion .)
    LLAVDER         reduce using rule 5 (instruccion -> declaracion .)
    CASE            reduce using rule 5 (instruccion -> declaracion .)
    DEFAULT         reduce using rule 5 (instruccion -> declaracion .)


state 6

    (6) instruccion -> asignacion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 31


state 7

    (7) instruccion -> sIf .

    CONSOLE         reduce using rule 7 (instruccion -> sIf .)
    ID              reduce using rule 7 (instruccion -> sIf .)
    IF              reduce using rule 7 (instruccion -> sIf .)
    WHILE           reduce using rule 7 (instruccion -> sIf .)
    FOR             reduce using rule 7 (instruccion -> sIf .)
    CONTINUE        reduce using rule 7 (instruccion -> sIf .)
    BREAK           reduce using rule 7 (instruccion -> sIf .)
    RETURN          reduce using rule 7 (instruccion -> sIf .)
    SWITCH          reduce using rule 7 (instruccion -> sIf .)
    FUNCTION        reduce using rule 7 (instruccion -> sIf .)
    VAR             reduce using rule 7 (instruccion -> sIf .)
    CONST           reduce using rule 7 (instruccion -> sIf .)
    $end            reduce using rule 7 (instruccion -> sIf .)
    LLAVDER         reduce using rule 7 (instruccion -> sIf .)
    CASE            reduce using rule 7 (instruccion -> sIf .)
    DEFAULT         reduce using rule 7 (instruccion -> sIf .)


state 8

    (8) instruccion -> sWhile .

    CONSOLE         reduce using rule 8 (instruccion -> sWhile .)
    ID              reduce using rule 8 (instruccion -> sWhile .)
    IF              reduce using rule 8 (instruccion -> sWhile .)
    WHILE           reduce using rule 8 (instruccion -> sWhile .)
    FOR             reduce using rule 8 (instruccion -> sWhile .)
    CONTINUE        reduce using rule 8 (instruccion -> sWhile .)
    BREAK           reduce using rule 8 (instruccion -> sWhile .)
    RETURN          reduce using rule 8 (instruccion -> sWhile .)
    SWITCH          reduce using rule 8 (instruccion -> sWhile .)
    FUNCTION        reduce using rule 8 (instruccion -> sWhile .)
    VAR             reduce using rule 8 (instruccion -> sWhile .)
    CONST           reduce using rule 8 (instruccion -> sWhile .)
    $end            reduce using rule 8 (instruccion -> sWhile .)
    LLAVDER         reduce using rule 8 (instruccion -> sWhile .)
    CASE            reduce using rule 8 (instruccion -> sWhile .)
    DEFAULT         reduce using rule 8 (instruccion -> sWhile .)


state 9

    (9) instruccion -> sFor .

    CONSOLE         reduce using rule 9 (instruccion -> sFor .)
    ID              reduce using rule 9 (instruccion -> sFor .)
    IF              reduce using rule 9 (instruccion -> sFor .)
    WHILE           reduce using rule 9 (instruccion -> sFor .)
    FOR             reduce using rule 9 (instruccion -> sFor .)
    CONTINUE        reduce using rule 9 (instruccion -> sFor .)
    BREAK           reduce using rule 9 (instruccion -> sFor .)
    RETURN          reduce using rule 9 (instruccion -> sFor .)
    SWITCH          reduce using rule 9 (instruccion -> sFor .)
    FUNCTION        reduce using rule 9 (instruccion -> sFor .)
    VAR             reduce using rule 9 (instruccion -> sFor .)
    CONST           reduce using rule 9 (instruccion -> sFor .)
    $end            reduce using rule 9 (instruccion -> sFor .)
    LLAVDER         reduce using rule 9 (instruccion -> sFor .)
    CASE            reduce using rule 9 (instruccion -> sFor .)
    DEFAULT         reduce using rule 9 (instruccion -> sFor .)


state 10

    (10) instruccion -> sContinue .

    CONSOLE         reduce using rule 10 (instruccion -> sContinue .)
    ID              reduce using rule 10 (instruccion -> sContinue .)
    IF              reduce using rule 10 (instruccion -> sContinue .)
    WHILE           reduce using rule 10 (instruccion -> sContinue .)
    FOR             reduce using rule 10 (instruccion -> sContinue .)
    CONTINUE        reduce using rule 10 (instruccion -> sContinue .)
    BREAK           reduce using rule 10 (instruccion -> sContinue .)
    RETURN          reduce using rule 10 (instruccion -> sContinue .)
    SWITCH          reduce using rule 10 (instruccion -> sContinue .)
    FUNCTION        reduce using rule 10 (instruccion -> sContinue .)
    VAR             reduce using rule 10 (instruccion -> sContinue .)
    CONST           reduce using rule 10 (instruccion -> sContinue .)
    $end            reduce using rule 10 (instruccion -> sContinue .)
    LLAVDER         reduce using rule 10 (instruccion -> sContinue .)
    CASE            reduce using rule 10 (instruccion -> sContinue .)
    DEFAULT         reduce using rule 10 (instruccion -> sContinue .)


state 11

    (11) instruccion -> sBreak .

    CONSOLE         reduce using rule 11 (instruccion -> sBreak .)
    ID              reduce using rule 11 (instruccion -> sBreak .)
    IF              reduce using rule 11 (instruccion -> sBreak .)
    WHILE           reduce using rule 11 (instruccion -> sBreak .)
    FOR             reduce using rule 11 (instruccion -> sBreak .)
    CONTINUE        reduce using rule 11 (instruccion -> sBreak .)
    BREAK           reduce using rule 11 (instruccion -> sBreak .)
    RETURN          reduce using rule 11 (instruccion -> sBreak .)
    SWITCH          reduce using rule 11 (instruccion -> sBreak .)
    FUNCTION        reduce using rule 11 (instruccion -> sBreak .)
    VAR             reduce using rule 11 (instruccion -> sBreak .)
    CONST           reduce using rule 11 (instruccion -> sBreak .)
    $end            reduce using rule 11 (instruccion -> sBreak .)
    LLAVDER         reduce using rule 11 (instruccion -> sBreak .)
    CASE            reduce using rule 11 (instruccion -> sBreak .)
    DEFAULT         reduce using rule 11 (instruccion -> sBreak .)


state 12

    (12) instruccion -> sReturn .

    CONSOLE         reduce using rule 12 (instruccion -> sReturn .)
    ID              reduce using rule 12 (instruccion -> sReturn .)
    IF              reduce using rule 12 (instruccion -> sReturn .)
    WHILE           reduce using rule 12 (instruccion -> sReturn .)
    FOR             reduce using rule 12 (instruccion -> sReturn .)
    CONTINUE        reduce using rule 12 (instruccion -> sReturn .)
    BREAK           reduce using rule 12 (instruccion -> sReturn .)
    RETURN          reduce using rule 12 (instruccion -> sReturn .)
    SWITCH          reduce using rule 12 (instruccion -> sReturn .)
    FUNCTION        reduce using rule 12 (instruccion -> sReturn .)
    VAR             reduce using rule 12 (instruccion -> sReturn .)
    CONST           reduce using rule 12 (instruccion -> sReturn .)
    $end            reduce using rule 12 (instruccion -> sReturn .)
    LLAVDER         reduce using rule 12 (instruccion -> sReturn .)
    CASE            reduce using rule 12 (instruccion -> sReturn .)
    DEFAULT         reduce using rule 12 (instruccion -> sReturn .)


state 13

    (13) instruccion -> sSwitch .

    CONSOLE         reduce using rule 13 (instruccion -> sSwitch .)
    ID              reduce using rule 13 (instruccion -> sSwitch .)
    IF              reduce using rule 13 (instruccion -> sSwitch .)
    WHILE           reduce using rule 13 (instruccion -> sSwitch .)
    FOR             reduce using rule 13 (instruccion -> sSwitch .)
    CONTINUE        reduce using rule 13 (instruccion -> sSwitch .)
    BREAK           reduce using rule 13 (instruccion -> sSwitch .)
    RETURN          reduce using rule 13 (instruccion -> sSwitch .)
    SWITCH          reduce using rule 13 (instruccion -> sSwitch .)
    FUNCTION        reduce using rule 13 (instruccion -> sSwitch .)
    VAR             reduce using rule 13 (instruccion -> sSwitch .)
    CONST           reduce using rule 13 (instruccion -> sSwitch .)
    $end            reduce using rule 13 (instruccion -> sSwitch .)
    LLAVDER         reduce using rule 13 (instruccion -> sSwitch .)
    CASE            reduce using rule 13 (instruccion -> sSwitch .)
    DEFAULT         reduce using rule 13 (instruccion -> sSwitch .)


state 14

    (14) instruccion -> declaracion_Funcion .

    CONSOLE         reduce using rule 14 (instruccion -> declaracion_Funcion .)
    ID              reduce using rule 14 (instruccion -> declaracion_Funcion .)
    IF              reduce using rule 14 (instruccion -> declaracion_Funcion .)
    WHILE           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    FOR             reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CONTINUE        reduce using rule 14 (instruccion -> declaracion_Funcion .)
    BREAK           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    RETURN          reduce using rule 14 (instruccion -> declaracion_Funcion .)
    SWITCH          reduce using rule 14 (instruccion -> declaracion_Funcion .)
    FUNCTION        reduce using rule 14 (instruccion -> declaracion_Funcion .)
    VAR             reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CONST           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    $end            reduce using rule 14 (instruccion -> declaracion_Funcion .)
    LLAVDER         reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CASE            reduce using rule 14 (instruccion -> declaracion_Funcion .)
    DEFAULT         reduce using rule 14 (instruccion -> declaracion_Funcion .)


state 15

    (15) instruccion -> callFuncion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 32


state 16

    (16) instruccion -> argumento_Funcion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 33


state 17

    (73) imprimir_instr -> CONSOLE . PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA

    PUNTO           shift and go to state 34


state 18

    (58) declaracion -> tipoVar . ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> tipoVar . ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> tipoVar . ID declaracion_implicita

    ID              shift and go to state 35


state 19

    (49) asignacion -> ID . IGUAL op_Ternario
    (50) asignacion -> ID . MAS IGUAL op_Ternario
    (51) asignacion -> ID . MENOS IGUAL op_Ternario
    (52) asignacion -> ID . CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> ID . CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> ID . MAS MAS
    (57) asignacion -> ID . MENOS MENOS
    (19) callFuncion -> ID . PARIZQ venir_Expresiones
    (17) argumento_Funcion -> ID . PUNTO ID PARIZQ venir_Expresiones

    IGUAL           shift and go to state 36
    MAS             shift and go to state 37
    MENOS           shift and go to state 38
    CORIZQ          shift and go to state 39
    PARIZQ          shift and go to state 40
    PUNTO           shift and go to state 41


state 20

    (44) sIf -> IF . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    PARIZQ          shift and go to state 42


state 21

    (43) sWhile -> WHILE . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 43


state 22

    (42) sFor -> FOR . PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 44


state 23

    (38) sContinue -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 45


state 24

    (39) sBreak -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 46


state 25

    (40) sReturn -> RETURN . PUNTOCOMA
    (41) sReturn -> RETURN . op_Ternario PUNTOCOMA
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PUNTOCOMA       shift and go to state 47
    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 48
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 26

    (33) sSwitch -> SWITCH . PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER

    PARIZQ          shift and go to state 76


state 27

    (24) declaracion_Funcion -> FUNCTION . ID PARIZQ parametros tipoFuncion instrucciones LLAVDER

    ID              shift and go to state 77


state 28

    (66) tipoVar -> VAR .

    ID              reduce using rule 66 (tipoVar -> VAR .)


state 29

    (67) tipoVar -> CONST .

    ID              reduce using rule 67 (tipoVar -> CONST .)


state 30

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SWITCH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONST           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CASE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEFAULT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 31

    (6) instruccion -> asignacion PUNTOCOMA .

    CONSOLE         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    ID              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    IF              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    WHILE           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FOR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    BREAK           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    RETURN          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    SWITCH          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FUNCTION        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    VAR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONST           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    $end            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    LLAVDER         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CASE            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    DEFAULT         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)


state 32

    (15) instruccion -> callFuncion PUNTOCOMA .

    CONSOLE         reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    ID              reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    IF              reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    WHILE           reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    FOR             reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    CONTINUE        reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    BREAK           reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    RETURN          reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    SWITCH          reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    FUNCTION        reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    VAR             reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    CONST           reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    $end            reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    LLAVDER         reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    CASE            reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    DEFAULT         reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)


state 33

    (16) instruccion -> argumento_Funcion PUNTOCOMA .

    CONSOLE         reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    ID              reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    IF              reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    WHILE           reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    FOR             reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    CONTINUE        reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    BREAK           reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    RETURN          reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    SWITCH          reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    FUNCTION        reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    VAR             reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    CONST           reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    $end            reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    LLAVDER         reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    CASE            reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)
    DEFAULT         reduce using rule 16 (instruccion -> argumento_Funcion PUNTOCOMA .)


state 34

    (73) imprimir_instr -> CONSOLE PUNTO . LOG PARIZQ lista_exp PARDER PUNTOCOMA

    LOG             shift and go to state 78


state 35

    (58) declaracion -> tipoVar ID . DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> tipoVar ID . DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> tipoVar ID . declaracion_implicita
    (65) declaracion_implicita -> . IGUAL op_Ternario PUNTOCOMA

    DOSPUNTOS       shift and go to state 79
    IGUAL           shift and go to state 81

    declaracion_implicita          shift and go to state 80

state 36

    (49) asignacion -> ID IGUAL . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 82
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 37

    (50) asignacion -> ID MAS . IGUAL op_Ternario
    (56) asignacion -> ID MAS . MAS

    IGUAL           shift and go to state 84
    MAS             shift and go to state 83


state 38

    (51) asignacion -> ID MENOS . IGUAL op_Ternario
    (57) asignacion -> ID MENOS . MENOS

    IGUAL           shift and go to state 86
    MENOS           shift and go to state 85


state 39

    (52) asignacion -> ID CORIZQ . op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> ID CORIZQ . op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 87
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 40

    (19) callFuncion -> ID PARIZQ . venir_Expresiones
    (20) venir_Expresiones -> . lista_Expresiones PARDER
    (21) venir_Expresiones -> . PARDER
    (22) lista_Expresiones -> . lista_Expresiones COMA op_Ternario
    (23) lista_Expresiones -> . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARDER          shift and go to state 90
    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    venir_Expresiones              shift and go to state 88
    lista_Expresiones              shift and go to state 89
    op_Ternario                    shift and go to state 91
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 41

    (17) argumento_Funcion -> ID PUNTO . ID PARIZQ venir_Expresiones

    ID              shift and go to state 92


state 42

    (44) sIf -> IF PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 93
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 43

    (43) sWhile -> WHILE PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 94
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 44

    (42) sFor -> FOR PARIZQ . declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    VAR             shift and go to state 28
    CONST           shift and go to state 29

    declaracion                    shift and go to state 95
    tipoVar                        shift and go to state 18

state 45

    (38) sContinue -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    FOR             reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    SWITCH          reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    FUNCTION        reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    CONST           reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    LLAVDER         reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    CASE            reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)
    DEFAULT         reduce using rule 38 (sContinue -> CONTINUE PUNTOCOMA .)


state 46

    (39) sBreak -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    ID              reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    IF              reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    FOR             reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    SWITCH          reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    FUNCTION        reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    CONST           reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    $end            reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    CASE            reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)
    DEFAULT         reduce using rule 39 (sBreak -> BREAK PUNTOCOMA .)


state 47

    (40) sReturn -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    ID              reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    IF              reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    FOR             reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    SWITCH          reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    FUNCTION        reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    CONST           reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    $end            reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    LLAVDER         reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    CASE            reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)
    DEFAULT         reduce using rule 40 (sReturn -> RETURN PUNTOCOMA .)


state 48

    (41) sReturn -> RETURN op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 96


state 49

    (76) op_Ternario -> exp_Or . INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> exp_Or .
    (79) exp_Or -> exp_Or . OR exp_And

    INTERROGACION   shift and go to state 97
    PUNTOCOMA       reduce using rule 77 (op_Ternario -> exp_Or .)
    PARDER          reduce using rule 77 (op_Ternario -> exp_Or .)
    CORDER          reduce using rule 77 (op_Ternario -> exp_Or .)
    COMA            reduce using rule 77 (op_Ternario -> exp_Or .)
    DOSPUNTOS       reduce using rule 77 (op_Ternario -> exp_Or .)
    OR              shift and go to state 98


state 50

    (78) op_Ternario -> TYPEOF . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 99
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 51

    (80) exp_Or -> exp_And .
    (81) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 80 (exp_Or -> exp_And .)
    OR              reduce using rule 80 (exp_Or -> exp_And .)
    PUNTOCOMA       reduce using rule 80 (exp_Or -> exp_And .)
    PARDER          reduce using rule 80 (exp_Or -> exp_And .)
    CORDER          reduce using rule 80 (exp_Or -> exp_And .)
    COMA            reduce using rule 80 (exp_Or -> exp_And .)
    DOSPUNTOS       reduce using rule 80 (exp_Or -> exp_And .)
    AND             shift and go to state 100


state 52

    (82) exp_And -> exp_Not .

    AND             reduce using rule 82 (exp_And -> exp_Not .)
    INTERROGACION   reduce using rule 82 (exp_And -> exp_Not .)
    OR              reduce using rule 82 (exp_And -> exp_Not .)
    PUNTOCOMA       reduce using rule 82 (exp_And -> exp_Not .)
    PARDER          reduce using rule 82 (exp_And -> exp_Not .)
    CORDER          reduce using rule 82 (exp_And -> exp_Not .)
    COMA            reduce using rule 82 (exp_And -> exp_Not .)
    DOSPUNTOS       reduce using rule 82 (exp_And -> exp_Not .)


state 53

    (83) exp_Not -> lNot . exp_Comp
    (85) lNot -> lNot . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    NOT             shift and go to state 102
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Comp                       shift and go to state 101
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 54

    (84) exp_Not -> exp_Comp .

    AND             reduce using rule 84 (exp_Not -> exp_Comp .)
    INTERROGACION   reduce using rule 84 (exp_Not -> exp_Comp .)
    OR              reduce using rule 84 (exp_Not -> exp_Comp .)
    PUNTOCOMA       reduce using rule 84 (exp_Not -> exp_Comp .)
    PARDER          reduce using rule 84 (exp_Not -> exp_Comp .)
    CORDER          reduce using rule 84 (exp_Not -> exp_Comp .)
    COMA            reduce using rule 84 (exp_Not -> exp_Comp .)
    DOSPUNTOS       reduce using rule 84 (exp_Not -> exp_Comp .)


state 55

    (86) lNot -> NOT .

    NOT             reduce using rule 86 (lNot -> NOT .)
    PARIZQ          reduce using rule 86 (lNot -> NOT .)
    MENOS           reduce using rule 86 (lNot -> NOT .)
    ENTERO          reduce using rule 86 (lNot -> NOT .)
    CADENA          reduce using rule 86 (lNot -> NOT .)
    DECIMAL         reduce using rule 86 (lNot -> NOT .)
    CARACTER        reduce using rule 86 (lNot -> NOT .)
    TRUE            reduce using rule 86 (lNot -> NOT .)
    FALSE           reduce using rule 86 (lNot -> NOT .)
    NULL            reduce using rule 86 (lNot -> NOT .)
    ID              reduce using rule 86 (lNot -> NOT .)
    CORIZQ          reduce using rule 86 (lNot -> NOT .)


state 56

    (87) exp_Comp -> exp_Sum_Menos . EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> exp_Sum_Menos . DISTINTO exp_Sum_Menos
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div
    (90) exp_rel -> exp_Sum_Menos . MAYOR exp_Sum_Menos
    (91) exp_rel -> exp_Sum_Menos . MENOR exp_Sum_Menos
    (92) exp_rel -> exp_Sum_Menos . MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> exp_Sum_Menos . MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> exp_Sum_Menos .

    EQUIVALENTE     shift and go to state 103
    DISTINTO        shift and go to state 104
    MAS             shift and go to state 105
    MENOS           shift and go to state 106
    MAYOR           shift and go to state 107
    MENOR           shift and go to state 108
    MAYORIGUAL      shift and go to state 109
    MENORIGUAL      shift and go to state 110
    AND             reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    INTERROGACION   reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    OR              reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    PARDER          reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    CORDER          reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    COMA            reduce using rule 94 (exp_rel -> exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 94 (exp_rel -> exp_Sum_Menos .)


state 57

    (89) exp_Comp -> exp_rel .

    AND             reduce using rule 89 (exp_Comp -> exp_rel .)
    INTERROGACION   reduce using rule 89 (exp_Comp -> exp_rel .)
    OR              reduce using rule 89 (exp_Comp -> exp_rel .)
    PUNTOCOMA       reduce using rule 89 (exp_Comp -> exp_rel .)
    PARDER          reduce using rule 89 (exp_Comp -> exp_rel .)
    CORDER          reduce using rule 89 (exp_Comp -> exp_rel .)
    COMA            reduce using rule 89 (exp_Comp -> exp_rel .)
    DOSPUNTOS       reduce using rule 89 (exp_Comp -> exp_rel .)


state 58

    (97) exp_Sum_Menos -> exp_Mul_Div .
    (98) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (99) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    DISTINTO        reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    MAS             reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOS           reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYOR           reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOR           reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    MENORIGUAL      reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    AND             reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    INTERROGACION   reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    OR              reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    PARDER          reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    CORDER          reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    COMA            reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 97 (exp_Sum_Menos -> exp_Mul_Div .)
    POR             shift and go to state 111
    DIVIDIDO        shift and go to state 112
    MODULO          shift and go to state 113


state 59

    (104) exp_Negativo -> MENOS . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    valor                          shift and go to state 114
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 60

    (101) exp_Mul_Div -> exp_Parentesis .

    POR             reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    DIVIDIDO        reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MODULO          reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    EQUIVALENTE     reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    DISTINTO        reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MAS             reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MENOS           reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MAYOR           reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MENOR           reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MAYORIGUAL      reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    MENORIGUAL      reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    AND             reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    INTERROGACION   reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    OR              reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    PUNTOCOMA       reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    PARDER          reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    CORDER          reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    COMA            reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)
    DOSPUNTOS       reduce using rule 101 (exp_Mul_Div -> exp_Parentesis .)


state 61

    (102) exp_Parentesis -> PARIZQ . op_Ternario PARDER
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 115
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 62

    (103) exp_Parentesis -> exp_Negativo .

    POR             reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    DIVIDIDO        reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MODULO          reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    EQUIVALENTE     reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    DISTINTO        reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MAS             reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MENOS           reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MAYOR           reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MENOR           reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MAYORIGUAL      reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    MENORIGUAL      reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    AND             reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    INTERROGACION   reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    OR              reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    PUNTOCOMA       reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    PARDER          reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    CORDER          reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    COMA            reduce using rule 103 (exp_Parentesis -> exp_Negativo .)
    DOSPUNTOS       reduce using rule 103 (exp_Parentesis -> exp_Negativo .)


state 63

    (105) exp_Negativo -> valor .

    POR             reduce using rule 105 (exp_Negativo -> valor .)
    DIVIDIDO        reduce using rule 105 (exp_Negativo -> valor .)
    MODULO          reduce using rule 105 (exp_Negativo -> valor .)
    EQUIVALENTE     reduce using rule 105 (exp_Negativo -> valor .)
    DISTINTO        reduce using rule 105 (exp_Negativo -> valor .)
    MAS             reduce using rule 105 (exp_Negativo -> valor .)
    MENOS           reduce using rule 105 (exp_Negativo -> valor .)
    MAYOR           reduce using rule 105 (exp_Negativo -> valor .)
    MENOR           reduce using rule 105 (exp_Negativo -> valor .)
    MAYORIGUAL      reduce using rule 105 (exp_Negativo -> valor .)
    MENORIGUAL      reduce using rule 105 (exp_Negativo -> valor .)
    AND             reduce using rule 105 (exp_Negativo -> valor .)
    INTERROGACION   reduce using rule 105 (exp_Negativo -> valor .)
    OR              reduce using rule 105 (exp_Negativo -> valor .)
    PUNTOCOMA       reduce using rule 105 (exp_Negativo -> valor .)
    PARDER          reduce using rule 105 (exp_Negativo -> valor .)
    CORDER          reduce using rule 105 (exp_Negativo -> valor .)
    COMA            reduce using rule 105 (exp_Negativo -> valor .)
    DOSPUNTOS       reduce using rule 105 (exp_Negativo -> valor .)


state 64

    (106) valor -> ENTERO .

    POR             reduce using rule 106 (valor -> ENTERO .)
    DIVIDIDO        reduce using rule 106 (valor -> ENTERO .)
    MODULO          reduce using rule 106 (valor -> ENTERO .)
    EQUIVALENTE     reduce using rule 106 (valor -> ENTERO .)
    DISTINTO        reduce using rule 106 (valor -> ENTERO .)
    MAS             reduce using rule 106 (valor -> ENTERO .)
    MENOS           reduce using rule 106 (valor -> ENTERO .)
    MAYOR           reduce using rule 106 (valor -> ENTERO .)
    MENOR           reduce using rule 106 (valor -> ENTERO .)
    MAYORIGUAL      reduce using rule 106 (valor -> ENTERO .)
    MENORIGUAL      reduce using rule 106 (valor -> ENTERO .)
    AND             reduce using rule 106 (valor -> ENTERO .)
    INTERROGACION   reduce using rule 106 (valor -> ENTERO .)
    OR              reduce using rule 106 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 106 (valor -> ENTERO .)
    PARDER          reduce using rule 106 (valor -> ENTERO .)
    CORDER          reduce using rule 106 (valor -> ENTERO .)
    COMA            reduce using rule 106 (valor -> ENTERO .)
    DOSPUNTOS       reduce using rule 106 (valor -> ENTERO .)


state 65

    (107) valor -> CADENA .

    POR             reduce using rule 107 (valor -> CADENA .)
    DIVIDIDO        reduce using rule 107 (valor -> CADENA .)
    MODULO          reduce using rule 107 (valor -> CADENA .)
    EQUIVALENTE     reduce using rule 107 (valor -> CADENA .)
    DISTINTO        reduce using rule 107 (valor -> CADENA .)
    MAS             reduce using rule 107 (valor -> CADENA .)
    MENOS           reduce using rule 107 (valor -> CADENA .)
    MAYOR           reduce using rule 107 (valor -> CADENA .)
    MENOR           reduce using rule 107 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 107 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 107 (valor -> CADENA .)
    AND             reduce using rule 107 (valor -> CADENA .)
    INTERROGACION   reduce using rule 107 (valor -> CADENA .)
    OR              reduce using rule 107 (valor -> CADENA .)
    PUNTOCOMA       reduce using rule 107 (valor -> CADENA .)
    PARDER          reduce using rule 107 (valor -> CADENA .)
    CORDER          reduce using rule 107 (valor -> CADENA .)
    COMA            reduce using rule 107 (valor -> CADENA .)
    DOSPUNTOS       reduce using rule 107 (valor -> CADENA .)


state 66

    (108) valor -> DECIMAL .

    POR             reduce using rule 108 (valor -> DECIMAL .)
    DIVIDIDO        reduce using rule 108 (valor -> DECIMAL .)
    MODULO          reduce using rule 108 (valor -> DECIMAL .)
    EQUIVALENTE     reduce using rule 108 (valor -> DECIMAL .)
    DISTINTO        reduce using rule 108 (valor -> DECIMAL .)
    MAS             reduce using rule 108 (valor -> DECIMAL .)
    MENOS           reduce using rule 108 (valor -> DECIMAL .)
    MAYOR           reduce using rule 108 (valor -> DECIMAL .)
    MENOR           reduce using rule 108 (valor -> DECIMAL .)
    MAYORIGUAL      reduce using rule 108 (valor -> DECIMAL .)
    MENORIGUAL      reduce using rule 108 (valor -> DECIMAL .)
    AND             reduce using rule 108 (valor -> DECIMAL .)
    INTERROGACION   reduce using rule 108 (valor -> DECIMAL .)
    OR              reduce using rule 108 (valor -> DECIMAL .)
    PUNTOCOMA       reduce using rule 108 (valor -> DECIMAL .)
    PARDER          reduce using rule 108 (valor -> DECIMAL .)
    CORDER          reduce using rule 108 (valor -> DECIMAL .)
    COMA            reduce using rule 108 (valor -> DECIMAL .)
    DOSPUNTOS       reduce using rule 108 (valor -> DECIMAL .)


state 67

    (109) valor -> CARACTER .

    POR             reduce using rule 109 (valor -> CARACTER .)
    DIVIDIDO        reduce using rule 109 (valor -> CARACTER .)
    MODULO          reduce using rule 109 (valor -> CARACTER .)
    EQUIVALENTE     reduce using rule 109 (valor -> CARACTER .)
    DISTINTO        reduce using rule 109 (valor -> CARACTER .)
    MAS             reduce using rule 109 (valor -> CARACTER .)
    MENOS           reduce using rule 109 (valor -> CARACTER .)
    MAYOR           reduce using rule 109 (valor -> CARACTER .)
    MENOR           reduce using rule 109 (valor -> CARACTER .)
    MAYORIGUAL      reduce using rule 109 (valor -> CARACTER .)
    MENORIGUAL      reduce using rule 109 (valor -> CARACTER .)
    AND             reduce using rule 109 (valor -> CARACTER .)
    INTERROGACION   reduce using rule 109 (valor -> CARACTER .)
    OR              reduce using rule 109 (valor -> CARACTER .)
    PUNTOCOMA       reduce using rule 109 (valor -> CARACTER .)
    PARDER          reduce using rule 109 (valor -> CARACTER .)
    CORDER          reduce using rule 109 (valor -> CARACTER .)
    COMA            reduce using rule 109 (valor -> CARACTER .)
    DOSPUNTOS       reduce using rule 109 (valor -> CARACTER .)


state 68

    (110) valor -> TRUE . PUNTO ID PARIZQ PARDER
    (112) valor -> TRUE .

    PUNTO           shift and go to state 116
    POR             reduce using rule 112 (valor -> TRUE .)
    DIVIDIDO        reduce using rule 112 (valor -> TRUE .)
    MODULO          reduce using rule 112 (valor -> TRUE .)
    EQUIVALENTE     reduce using rule 112 (valor -> TRUE .)
    DISTINTO        reduce using rule 112 (valor -> TRUE .)
    MAS             reduce using rule 112 (valor -> TRUE .)
    MENOS           reduce using rule 112 (valor -> TRUE .)
    MAYOR           reduce using rule 112 (valor -> TRUE .)
    MENOR           reduce using rule 112 (valor -> TRUE .)
    MAYORIGUAL      reduce using rule 112 (valor -> TRUE .)
    MENORIGUAL      reduce using rule 112 (valor -> TRUE .)
    AND             reduce using rule 112 (valor -> TRUE .)
    INTERROGACION   reduce using rule 112 (valor -> TRUE .)
    OR              reduce using rule 112 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 112 (valor -> TRUE .)
    PARDER          reduce using rule 112 (valor -> TRUE .)
    CORDER          reduce using rule 112 (valor -> TRUE .)
    COMA            reduce using rule 112 (valor -> TRUE .)
    DOSPUNTOS       reduce using rule 112 (valor -> TRUE .)


state 69

    (115) valor -> ID .
    (119) valor -> ID . CORIZQ op_Ternario CORDER
    (120) valor -> ID . CORIZQ op_Ternario CORDER listaAccesos
    (19) callFuncion -> ID . PARIZQ venir_Expresiones
    (17) argumento_Funcion -> ID . PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> ID . PUNTO ID

    POR             reduce using rule 115 (valor -> ID .)
    DIVIDIDO        reduce using rule 115 (valor -> ID .)
    MODULO          reduce using rule 115 (valor -> ID .)
    EQUIVALENTE     reduce using rule 115 (valor -> ID .)
    DISTINTO        reduce using rule 115 (valor -> ID .)
    MAS             reduce using rule 115 (valor -> ID .)
    MENOS           reduce using rule 115 (valor -> ID .)
    MAYOR           reduce using rule 115 (valor -> ID .)
    MENOR           reduce using rule 115 (valor -> ID .)
    MAYORIGUAL      reduce using rule 115 (valor -> ID .)
    MENORIGUAL      reduce using rule 115 (valor -> ID .)
    AND             reduce using rule 115 (valor -> ID .)
    INTERROGACION   reduce using rule 115 (valor -> ID .)
    OR              reduce using rule 115 (valor -> ID .)
    PUNTOCOMA       reduce using rule 115 (valor -> ID .)
    PARDER          reduce using rule 115 (valor -> ID .)
    CORDER          reduce using rule 115 (valor -> ID .)
    COMA            reduce using rule 115 (valor -> ID .)
    DOSPUNTOS       reduce using rule 115 (valor -> ID .)
    CORIZQ          shift and go to state 117
    PARIZQ          shift and go to state 40
    PUNTO           shift and go to state 118


state 70

    (111) valor -> FALSE . PUNTO ID PARIZQ PARDER
    (113) valor -> FALSE .

    PUNTO           shift and go to state 119
    POR             reduce using rule 113 (valor -> FALSE .)
    DIVIDIDO        reduce using rule 113 (valor -> FALSE .)
    MODULO          reduce using rule 113 (valor -> FALSE .)
    EQUIVALENTE     reduce using rule 113 (valor -> FALSE .)
    DISTINTO        reduce using rule 113 (valor -> FALSE .)
    MAS             reduce using rule 113 (valor -> FALSE .)
    MENOS           reduce using rule 113 (valor -> FALSE .)
    MAYOR           reduce using rule 113 (valor -> FALSE .)
    MENOR           reduce using rule 113 (valor -> FALSE .)
    MAYORIGUAL      reduce using rule 113 (valor -> FALSE .)
    MENORIGUAL      reduce using rule 113 (valor -> FALSE .)
    AND             reduce using rule 113 (valor -> FALSE .)
    INTERROGACION   reduce using rule 113 (valor -> FALSE .)
    OR              reduce using rule 113 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 113 (valor -> FALSE .)
    PARDER          reduce using rule 113 (valor -> FALSE .)
    CORDER          reduce using rule 113 (valor -> FALSE .)
    COMA            reduce using rule 113 (valor -> FALSE .)
    DOSPUNTOS       reduce using rule 113 (valor -> FALSE .)


state 71

    (114) valor -> NULL .

    POR             reduce using rule 114 (valor -> NULL .)
    DIVIDIDO        reduce using rule 114 (valor -> NULL .)
    MODULO          reduce using rule 114 (valor -> NULL .)
    EQUIVALENTE     reduce using rule 114 (valor -> NULL .)
    DISTINTO        reduce using rule 114 (valor -> NULL .)
    MAS             reduce using rule 114 (valor -> NULL .)
    MENOS           reduce using rule 114 (valor -> NULL .)
    MAYOR           reduce using rule 114 (valor -> NULL .)
    MENOR           reduce using rule 114 (valor -> NULL .)
    MAYORIGUAL      reduce using rule 114 (valor -> NULL .)
    MENORIGUAL      reduce using rule 114 (valor -> NULL .)
    AND             reduce using rule 114 (valor -> NULL .)
    INTERROGACION   reduce using rule 114 (valor -> NULL .)
    OR              reduce using rule 114 (valor -> NULL .)
    PUNTOCOMA       reduce using rule 114 (valor -> NULL .)
    PARDER          reduce using rule 114 (valor -> NULL .)
    CORDER          reduce using rule 114 (valor -> NULL .)
    COMA            reduce using rule 114 (valor -> NULL .)
    DOSPUNTOS       reduce using rule 114 (valor -> NULL .)


state 72

    (116) valor -> callFuncion .

    POR             reduce using rule 116 (valor -> callFuncion .)
    DIVIDIDO        reduce using rule 116 (valor -> callFuncion .)
    MODULO          reduce using rule 116 (valor -> callFuncion .)
    EQUIVALENTE     reduce using rule 116 (valor -> callFuncion .)
    DISTINTO        reduce using rule 116 (valor -> callFuncion .)
    MAS             reduce using rule 116 (valor -> callFuncion .)
    MENOS           reduce using rule 116 (valor -> callFuncion .)
    MAYOR           reduce using rule 116 (valor -> callFuncion .)
    MENOR           reduce using rule 116 (valor -> callFuncion .)
    MAYORIGUAL      reduce using rule 116 (valor -> callFuncion .)
    MENORIGUAL      reduce using rule 116 (valor -> callFuncion .)
    AND             reduce using rule 116 (valor -> callFuncion .)
    INTERROGACION   reduce using rule 116 (valor -> callFuncion .)
    OR              reduce using rule 116 (valor -> callFuncion .)
    PUNTOCOMA       reduce using rule 116 (valor -> callFuncion .)
    PARDER          reduce using rule 116 (valor -> callFuncion .)
    CORDER          reduce using rule 116 (valor -> callFuncion .)
    COMA            reduce using rule 116 (valor -> callFuncion .)
    DOSPUNTOS       reduce using rule 116 (valor -> callFuncion .)


state 73

    (117) valor -> CORIZQ . lista_Expresiones CORDER
    (118) valor -> CORIZQ . CORDER
    (22) lista_Expresiones -> . lista_Expresiones COMA op_Ternario
    (23) lista_Expresiones -> . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    CORDER          shift and go to state 121
    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    lista_Expresiones              shift and go to state 120
    op_Ternario                    shift and go to state 91
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 74

    (121) valor -> argumento_Funcion .

    POR             reduce using rule 121 (valor -> argumento_Funcion .)
    DIVIDIDO        reduce using rule 121 (valor -> argumento_Funcion .)
    MODULO          reduce using rule 121 (valor -> argumento_Funcion .)
    EQUIVALENTE     reduce using rule 121 (valor -> argumento_Funcion .)
    DISTINTO        reduce using rule 121 (valor -> argumento_Funcion .)
    MAS             reduce using rule 121 (valor -> argumento_Funcion .)
    MENOS           reduce using rule 121 (valor -> argumento_Funcion .)
    MAYOR           reduce using rule 121 (valor -> argumento_Funcion .)
    MENOR           reduce using rule 121 (valor -> argumento_Funcion .)
    MAYORIGUAL      reduce using rule 121 (valor -> argumento_Funcion .)
    MENORIGUAL      reduce using rule 121 (valor -> argumento_Funcion .)
    AND             reduce using rule 121 (valor -> argumento_Funcion .)
    INTERROGACION   reduce using rule 121 (valor -> argumento_Funcion .)
    OR              reduce using rule 121 (valor -> argumento_Funcion .)
    PUNTOCOMA       reduce using rule 121 (valor -> argumento_Funcion .)
    PARDER          reduce using rule 121 (valor -> argumento_Funcion .)
    CORDER          reduce using rule 121 (valor -> argumento_Funcion .)
    COMA            reduce using rule 121 (valor -> argumento_Funcion .)
    DOSPUNTOS       reduce using rule 121 (valor -> argumento_Funcion .)


state 75

    (122) valor -> accesoArgumento .

    POR             reduce using rule 122 (valor -> accesoArgumento .)
    DIVIDIDO        reduce using rule 122 (valor -> accesoArgumento .)
    MODULO          reduce using rule 122 (valor -> accesoArgumento .)
    EQUIVALENTE     reduce using rule 122 (valor -> accesoArgumento .)
    DISTINTO        reduce using rule 122 (valor -> accesoArgumento .)
    MAS             reduce using rule 122 (valor -> accesoArgumento .)
    MENOS           reduce using rule 122 (valor -> accesoArgumento .)
    MAYOR           reduce using rule 122 (valor -> accesoArgumento .)
    MENOR           reduce using rule 122 (valor -> accesoArgumento .)
    MAYORIGUAL      reduce using rule 122 (valor -> accesoArgumento .)
    MENORIGUAL      reduce using rule 122 (valor -> accesoArgumento .)
    AND             reduce using rule 122 (valor -> accesoArgumento .)
    INTERROGACION   reduce using rule 122 (valor -> accesoArgumento .)
    OR              reduce using rule 122 (valor -> accesoArgumento .)
    PUNTOCOMA       reduce using rule 122 (valor -> accesoArgumento .)
    PARDER          reduce using rule 122 (valor -> accesoArgumento .)
    CORDER          reduce using rule 122 (valor -> accesoArgumento .)
    COMA            reduce using rule 122 (valor -> accesoArgumento .)
    DOSPUNTOS       reduce using rule 122 (valor -> accesoArgumento .)


state 76

    (33) sSwitch -> SWITCH PARIZQ . op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 122
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 77

    (24) declaracion_Funcion -> FUNCTION ID . PARIZQ parametros tipoFuncion instrucciones LLAVDER

    PARIZQ          shift and go to state 123


state 78

    (73) imprimir_instr -> CONSOLE PUNTO LOG . PARIZQ lista_exp PARDER PUNTOCOMA

    PARIZQ          shift and go to state 124


state 79

    (58) declaracion -> tipoVar ID DOSPUNTOS . tipo declaracion_explicita
    (59) declaracion -> tipoVar ID DOSPUNTOS . tipo lista_Corchetes declaracion_explicita
    (68) tipo -> . NUMBER
    (69) tipo -> . FLOAT
    (70) tipo -> . STRING
    (71) tipo -> . BOOLEAN
    (72) tipo -> . CHAR

    NUMBER          shift and go to state 126
    FLOAT           shift and go to state 127
    STRING          shift and go to state 128
    BOOLEAN         shift and go to state 129
    CHAR            shift and go to state 130

    tipo                           shift and go to state 125

state 80

    (60) declaracion -> tipoVar ID declaracion_implicita .

    CONSOLE         reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    ID              reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    IF              reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    WHILE           reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    FOR             reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    CONTINUE        reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    BREAK           reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    RETURN          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    SWITCH          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    FUNCTION        reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    VAR             reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    CONST           reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    $end            reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    TYPEOF          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    NOT             reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    PARIZQ          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    MENOS           reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    ENTERO          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    CADENA          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    DECIMAL         reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    CARACTER        reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    TRUE            reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    FALSE           reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    NULL            reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    CORIZQ          reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    LLAVDER         reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    CASE            reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)
    DEFAULT         reduce using rule 60 (declaracion -> tipoVar ID declaracion_implicita .)


state 81

    (65) declaracion_implicita -> IGUAL . op_Ternario PUNTOCOMA
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 131
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 82

    (49) asignacion -> ID IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 49 (asignacion -> ID IGUAL op_Ternario .)
    PARDER          reduce using rule 49 (asignacion -> ID IGUAL op_Ternario .)


state 83

    (56) asignacion -> ID MAS MAS .

    PUNTOCOMA       reduce using rule 56 (asignacion -> ID MAS MAS .)
    PARDER          reduce using rule 56 (asignacion -> ID MAS MAS .)


state 84

    (50) asignacion -> ID MAS IGUAL . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 132
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 85

    (57) asignacion -> ID MENOS MENOS .

    PUNTOCOMA       reduce using rule 57 (asignacion -> ID MENOS MENOS .)
    PARDER          reduce using rule 57 (asignacion -> ID MENOS MENOS .)


state 86

    (51) asignacion -> ID MENOS IGUAL . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 133
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 87

    (52) asignacion -> ID CORIZQ op_Ternario . CORDER IGUAL op_Ternario
    (53) asignacion -> ID CORIZQ op_Ternario . CORDER listaAccesos IGUAL op_Ternario

    CORDER          shift and go to state 134


state 88

    (19) callFuncion -> ID PARIZQ venir_Expresiones .

    PUNTOCOMA       reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    POR             reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    DIVIDIDO        reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MODULO          reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    EQUIVALENTE     reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    DISTINTO        reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MAS             reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MENOS           reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MAYOR           reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MENOR           reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MAYORIGUAL      reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MENORIGUAL      reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    AND             reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    INTERROGACION   reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    OR              reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    PARDER          reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    CORDER          reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    COMA            reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)
    DOSPUNTOS       reduce using rule 19 (callFuncion -> ID PARIZQ venir_Expresiones .)


state 89

    (20) venir_Expresiones -> lista_Expresiones . PARDER
    (22) lista_Expresiones -> lista_Expresiones . COMA op_Ternario

    PARDER          shift and go to state 135
    COMA            shift and go to state 136


state 90

    (21) venir_Expresiones -> PARDER .

    PUNTOCOMA       reduce using rule 21 (venir_Expresiones -> PARDER .)
    POR             reduce using rule 21 (venir_Expresiones -> PARDER .)
    DIVIDIDO        reduce using rule 21 (venir_Expresiones -> PARDER .)
    MODULO          reduce using rule 21 (venir_Expresiones -> PARDER .)
    EQUIVALENTE     reduce using rule 21 (venir_Expresiones -> PARDER .)
    DISTINTO        reduce using rule 21 (venir_Expresiones -> PARDER .)
    MAS             reduce using rule 21 (venir_Expresiones -> PARDER .)
    MENOS           reduce using rule 21 (venir_Expresiones -> PARDER .)
    MAYOR           reduce using rule 21 (venir_Expresiones -> PARDER .)
    MENOR           reduce using rule 21 (venir_Expresiones -> PARDER .)
    MAYORIGUAL      reduce using rule 21 (venir_Expresiones -> PARDER .)
    MENORIGUAL      reduce using rule 21 (venir_Expresiones -> PARDER .)
    AND             reduce using rule 21 (venir_Expresiones -> PARDER .)
    INTERROGACION   reduce using rule 21 (venir_Expresiones -> PARDER .)
    OR              reduce using rule 21 (venir_Expresiones -> PARDER .)
    PARDER          reduce using rule 21 (venir_Expresiones -> PARDER .)
    CORDER          reduce using rule 21 (venir_Expresiones -> PARDER .)
    COMA            reduce using rule 21 (venir_Expresiones -> PARDER .)
    DOSPUNTOS       reduce using rule 21 (venir_Expresiones -> PARDER .)


state 91

    (23) lista_Expresiones -> op_Ternario .

    PARDER          reduce using rule 23 (lista_Expresiones -> op_Ternario .)
    COMA            reduce using rule 23 (lista_Expresiones -> op_Ternario .)
    CORDER          reduce using rule 23 (lista_Expresiones -> op_Ternario .)


state 92

    (17) argumento_Funcion -> ID PUNTO ID . PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 137


state 93

    (44) sIf -> IF PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones sIf2

    PARDER          shift and go to state 138


state 94

    (43) sWhile -> WHILE PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 139


state 95

    (42) sFor -> FOR PARIZQ declaracion . op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 140
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 96

    (41) sReturn -> RETURN op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    ID              reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    IF              reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    $end            reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 41 (sReturn -> RETURN op_Ternario PUNTOCOMA .)


state 97

    (76) op_Ternario -> exp_Or INTERROGACION . exp_Or DOSPUNTOS exp_Or
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Or                         shift and go to state 141
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 98

    (79) exp_Or -> exp_Or OR . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_And                        shift and go to state 142
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 99

    (78) op_Ternario -> TYPEOF op_Ternario .

    PUNTOCOMA       reduce using rule 78 (op_Ternario -> TYPEOF op_Ternario .)
    PARDER          reduce using rule 78 (op_Ternario -> TYPEOF op_Ternario .)
    CORDER          reduce using rule 78 (op_Ternario -> TYPEOF op_Ternario .)
    COMA            reduce using rule 78 (op_Ternario -> TYPEOF op_Ternario .)
    DOSPUNTOS       reduce using rule 78 (op_Ternario -> TYPEOF op_Ternario .)


state 100

    (81) exp_And -> exp_And AND . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Not                        shift and go to state 143
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 101

    (83) exp_Not -> lNot exp_Comp .

    AND             reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    INTERROGACION   reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    OR              reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    PUNTOCOMA       reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    PARDER          reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    CORDER          reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    COMA            reduce using rule 83 (exp_Not -> lNot exp_Comp .)
    DOSPUNTOS       reduce using rule 83 (exp_Not -> lNot exp_Comp .)


state 102

    (85) lNot -> lNot NOT .

    NOT             reduce using rule 85 (lNot -> lNot NOT .)
    PARIZQ          reduce using rule 85 (lNot -> lNot NOT .)
    MENOS           reduce using rule 85 (lNot -> lNot NOT .)
    ENTERO          reduce using rule 85 (lNot -> lNot NOT .)
    CADENA          reduce using rule 85 (lNot -> lNot NOT .)
    DECIMAL         reduce using rule 85 (lNot -> lNot NOT .)
    CARACTER        reduce using rule 85 (lNot -> lNot NOT .)
    TRUE            reduce using rule 85 (lNot -> lNot NOT .)
    FALSE           reduce using rule 85 (lNot -> lNot NOT .)
    NULL            reduce using rule 85 (lNot -> lNot NOT .)
    ID              reduce using rule 85 (lNot -> lNot NOT .)
    CORIZQ          reduce using rule 85 (lNot -> lNot NOT .)


state 103

    (87) exp_Comp -> exp_Sum_Menos EQUIVALENTE . exp_Sum_Menos
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Sum_Menos                  shift and go to state 144
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 104

    (88) exp_Comp -> exp_Sum_Menos DISTINTO . exp_Sum_Menos
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Sum_Menos                  shift and go to state 145
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 105

    (95) exp_Sum_Menos -> exp_Sum_Menos MAS . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Mul_Div                    shift and go to state 146
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 106

    (96) exp_Sum_Menos -> exp_Sum_Menos MENOS . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Mul_Div                    shift and go to state 147
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 107

    (90) exp_rel -> exp_Sum_Menos MAYOR . exp_Sum_Menos
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Sum_Menos                  shift and go to state 148
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 108

    (91) exp_rel -> exp_Sum_Menos MENOR . exp_Sum_Menos
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Sum_Menos                  shift and go to state 149
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 109

    (92) exp_rel -> exp_Sum_Menos MAYORIGUAL . exp_Sum_Menos
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Sum_Menos                  shift and go to state 150
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 110

    (93) exp_rel -> exp_Sum_Menos MENORIGUAL . exp_Sum_Menos
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Sum_Menos                  shift and go to state 151
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 111

    (98) exp_Mul_Div -> exp_Mul_Div POR . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Parentesis                 shift and go to state 152
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 112

    (99) exp_Mul_Div -> exp_Mul_Div DIVIDIDO . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Parentesis                 shift and go to state 153
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 113

    (100) exp_Mul_Div -> exp_Mul_Div MODULO . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Parentesis                 shift and go to state 154
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 114

    (104) exp_Negativo -> MENOS valor .

    POR             reduce using rule 104 (exp_Negativo -> MENOS valor .)
    DIVIDIDO        reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MODULO          reduce using rule 104 (exp_Negativo -> MENOS valor .)
    EQUIVALENTE     reduce using rule 104 (exp_Negativo -> MENOS valor .)
    DISTINTO        reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MAS             reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MENOS           reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MAYOR           reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MENOR           reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MAYORIGUAL      reduce using rule 104 (exp_Negativo -> MENOS valor .)
    MENORIGUAL      reduce using rule 104 (exp_Negativo -> MENOS valor .)
    AND             reduce using rule 104 (exp_Negativo -> MENOS valor .)
    INTERROGACION   reduce using rule 104 (exp_Negativo -> MENOS valor .)
    OR              reduce using rule 104 (exp_Negativo -> MENOS valor .)
    PUNTOCOMA       reduce using rule 104 (exp_Negativo -> MENOS valor .)
    PARDER          reduce using rule 104 (exp_Negativo -> MENOS valor .)
    CORDER          reduce using rule 104 (exp_Negativo -> MENOS valor .)
    COMA            reduce using rule 104 (exp_Negativo -> MENOS valor .)
    DOSPUNTOS       reduce using rule 104 (exp_Negativo -> MENOS valor .)


state 115

    (102) exp_Parentesis -> PARIZQ op_Ternario . PARDER

    PARDER          shift and go to state 155


state 116

    (110) valor -> TRUE PUNTO . ID PARIZQ PARDER

    ID              shift and go to state 156


state 117

    (119) valor -> ID CORIZQ . op_Ternario CORDER
    (120) valor -> ID CORIZQ . op_Ternario CORDER listaAccesos
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 157
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 118

    (17) argumento_Funcion -> ID PUNTO . ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> ID PUNTO . ID

    ID              shift and go to state 158


state 119

    (111) valor -> FALSE PUNTO . ID PARIZQ PARDER

    ID              shift and go to state 159


state 120

    (117) valor -> CORIZQ lista_Expresiones . CORDER
    (22) lista_Expresiones -> lista_Expresiones . COMA op_Ternario

    CORDER          shift and go to state 160
    COMA            shift and go to state 136


state 121

    (118) valor -> CORIZQ CORDER .

    POR             reduce using rule 118 (valor -> CORIZQ CORDER .)
    DIVIDIDO        reduce using rule 118 (valor -> CORIZQ CORDER .)
    MODULO          reduce using rule 118 (valor -> CORIZQ CORDER .)
    EQUIVALENTE     reduce using rule 118 (valor -> CORIZQ CORDER .)
    DISTINTO        reduce using rule 118 (valor -> CORIZQ CORDER .)
    MAS             reduce using rule 118 (valor -> CORIZQ CORDER .)
    MENOS           reduce using rule 118 (valor -> CORIZQ CORDER .)
    MAYOR           reduce using rule 118 (valor -> CORIZQ CORDER .)
    MENOR           reduce using rule 118 (valor -> CORIZQ CORDER .)
    MAYORIGUAL      reduce using rule 118 (valor -> CORIZQ CORDER .)
    MENORIGUAL      reduce using rule 118 (valor -> CORIZQ CORDER .)
    AND             reduce using rule 118 (valor -> CORIZQ CORDER .)
    INTERROGACION   reduce using rule 118 (valor -> CORIZQ CORDER .)
    OR              reduce using rule 118 (valor -> CORIZQ CORDER .)
    PUNTOCOMA       reduce using rule 118 (valor -> CORIZQ CORDER .)
    PARDER          reduce using rule 118 (valor -> CORIZQ CORDER .)
    CORDER          reduce using rule 118 (valor -> CORIZQ CORDER .)
    COMA            reduce using rule 118 (valor -> CORIZQ CORDER .)
    DOSPUNTOS       reduce using rule 118 (valor -> CORIZQ CORDER .)


state 122

    (33) sSwitch -> SWITCH PARIZQ op_Ternario . PARDER LLAVIZQ listCases LLAVDER

    PARDER          shift and go to state 161


state 123

    (24) declaracion_Funcion -> FUNCTION ID PARIZQ . parametros tipoFuncion instrucciones LLAVDER
    (25) parametros -> . PARDER
    (26) parametros -> . lista_Parametros PARDER
    (27) lista_Parametros -> . lista_Parametros COMA ID DOSPUNTOS tipo
    (28) lista_Parametros -> . ID DOSPUNTOS tipo
    (29) lista_Parametros -> . lista_Parametros COMA ID DOSPUNTOS tipo CORIZQ CORDER
    (30) lista_Parametros -> . ID DOSPUNTOS tipo CORIZQ CORDER

    PARDER          shift and go to state 164
    ID              shift and go to state 162

    parametros                     shift and go to state 163
    lista_Parametros               shift and go to state 165

state 124

    (73) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ . lista_exp PARDER PUNTOCOMA
    (74) lista_exp -> . lista_exp COMA op_Ternario
    (75) lista_exp -> . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    lista_exp                      shift and go to state 166
    op_Ternario                    shift and go to state 167
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 125

    (58) declaracion -> tipoVar ID DOSPUNTOS tipo . declaracion_explicita
    (59) declaracion -> tipoVar ID DOSPUNTOS tipo . lista_Corchetes declaracion_explicita
    (63) declaracion_explicita -> . PUNTOCOMA
    (64) declaracion_explicita -> . IGUAL op_Ternario PUNTOCOMA
    (61) lista_Corchetes -> . lista_Corchetes CORIZQ CORDER
    (62) lista_Corchetes -> . CORIZQ CORDER

    PUNTOCOMA       shift and go to state 170
    IGUAL           shift and go to state 171
    CORIZQ          shift and go to state 172

    declaracion_explicita          shift and go to state 168
    lista_Corchetes                shift and go to state 169

state 126

    (68) tipo -> NUMBER .

    PUNTOCOMA       reduce using rule 68 (tipo -> NUMBER .)
    IGUAL           reduce using rule 68 (tipo -> NUMBER .)
    CORIZQ          reduce using rule 68 (tipo -> NUMBER .)
    PARDER          reduce using rule 68 (tipo -> NUMBER .)
    COMA            reduce using rule 68 (tipo -> NUMBER .)
    LLAVIZQ         reduce using rule 68 (tipo -> NUMBER .)


state 127

    (69) tipo -> FLOAT .

    PUNTOCOMA       reduce using rule 69 (tipo -> FLOAT .)
    IGUAL           reduce using rule 69 (tipo -> FLOAT .)
    CORIZQ          reduce using rule 69 (tipo -> FLOAT .)
    PARDER          reduce using rule 69 (tipo -> FLOAT .)
    COMA            reduce using rule 69 (tipo -> FLOAT .)
    LLAVIZQ         reduce using rule 69 (tipo -> FLOAT .)


state 128

    (70) tipo -> STRING .

    PUNTOCOMA       reduce using rule 70 (tipo -> STRING .)
    IGUAL           reduce using rule 70 (tipo -> STRING .)
    CORIZQ          reduce using rule 70 (tipo -> STRING .)
    PARDER          reduce using rule 70 (tipo -> STRING .)
    COMA            reduce using rule 70 (tipo -> STRING .)
    LLAVIZQ         reduce using rule 70 (tipo -> STRING .)


state 129

    (71) tipo -> BOOLEAN .

    PUNTOCOMA       reduce using rule 71 (tipo -> BOOLEAN .)
    IGUAL           reduce using rule 71 (tipo -> BOOLEAN .)
    CORIZQ          reduce using rule 71 (tipo -> BOOLEAN .)
    PARDER          reduce using rule 71 (tipo -> BOOLEAN .)
    COMA            reduce using rule 71 (tipo -> BOOLEAN .)
    LLAVIZQ         reduce using rule 71 (tipo -> BOOLEAN .)


state 130

    (72) tipo -> CHAR .

    PUNTOCOMA       reduce using rule 72 (tipo -> CHAR .)
    IGUAL           reduce using rule 72 (tipo -> CHAR .)
    CORIZQ          reduce using rule 72 (tipo -> CHAR .)
    PARDER          reduce using rule 72 (tipo -> CHAR .)
    COMA            reduce using rule 72 (tipo -> CHAR .)
    LLAVIZQ         reduce using rule 72 (tipo -> CHAR .)


state 131

    (65) declaracion_implicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 173


state 132

    (50) asignacion -> ID MAS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 50 (asignacion -> ID MAS IGUAL op_Ternario .)
    PARDER          reduce using rule 50 (asignacion -> ID MAS IGUAL op_Ternario .)


state 133

    (51) asignacion -> ID MENOS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 51 (asignacion -> ID MENOS IGUAL op_Ternario .)
    PARDER          reduce using rule 51 (asignacion -> ID MENOS IGUAL op_Ternario .)


state 134

    (52) asignacion -> ID CORIZQ op_Ternario CORDER . IGUAL op_Ternario
    (53) asignacion -> ID CORIZQ op_Ternario CORDER . listaAccesos IGUAL op_Ternario
    (54) listaAccesos -> . listaAccesos CORIZQ op_Ternario CORDER
    (55) listaAccesos -> . CORIZQ op_Ternario CORDER

    IGUAL           shift and go to state 175
    CORIZQ          shift and go to state 174

    listaAccesos                   shift and go to state 176

state 135

    (20) venir_Expresiones -> lista_Expresiones PARDER .

    PUNTOCOMA       reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    POR             reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    DIVIDIDO        reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MODULO          reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    EQUIVALENTE     reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    DISTINTO        reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MAS             reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MENOS           reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MAYOR           reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MENOR           reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MAYORIGUAL      reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    MENORIGUAL      reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    AND             reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    INTERROGACION   reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    OR              reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    PARDER          reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    CORDER          reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    COMA            reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)
    DOSPUNTOS       reduce using rule 20 (venir_Expresiones -> lista_Expresiones PARDER .)


state 136

    (22) lista_Expresiones -> lista_Expresiones COMA . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 177
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 137

    (17) argumento_Funcion -> ID PUNTO ID PARIZQ . venir_Expresiones
    (20) venir_Expresiones -> . lista_Expresiones PARDER
    (21) venir_Expresiones -> . PARDER
    (22) lista_Expresiones -> . lista_Expresiones COMA op_Ternario
    (23) lista_Expresiones -> . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    PARDER          shift and go to state 90
    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    venir_Expresiones              shift and go to state 178
    lista_Expresiones              shift and go to state 89
    op_Ternario                    shift and go to state 91
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 138

    (44) sIf -> IF PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 179


state 139

    (43) sWhile -> WHILE PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 180


state 140

    (42) sFor -> FOR PARIZQ declaracion op_Ternario . PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PUNTOCOMA       shift and go to state 181


state 141

    (76) op_Ternario -> exp_Or INTERROGACION exp_Or . DOSPUNTOS exp_Or
    (79) exp_Or -> exp_Or . OR exp_And

    DOSPUNTOS       shift and go to state 182
    OR              shift and go to state 98


state 142

    (79) exp_Or -> exp_Or OR exp_And .
    (81) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    OR              reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    PUNTOCOMA       reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    PARDER          reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    CORDER          reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    COMA            reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    DOSPUNTOS       reduce using rule 79 (exp_Or -> exp_Or OR exp_And .)
    AND             shift and go to state 100


state 143

    (81) exp_And -> exp_And AND exp_Not .

    AND             reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    INTERROGACION   reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    OR              reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    PUNTOCOMA       reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    PARDER          reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    CORDER          reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    COMA            reduce using rule 81 (exp_And -> exp_And AND exp_Not .)
    DOSPUNTOS       reduce using rule 81 (exp_And -> exp_And AND exp_Not .)


state 144

    (87) exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    INTERROGACION   reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    OR              reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PARDER          reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    CORDER          reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    COMA            reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 87 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106


state 145

    (88) exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    INTERROGACION   reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    OR              reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PARDER          reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    CORDER          reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    COMA            reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 88 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106


state 146

    (95) exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .
    (98) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (99) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DISTINTO        reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAS             reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOS           reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYOR           reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOR           reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    AND             reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    INTERROGACION   reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    OR              reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PARDER          reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    CORDER          reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    COMA            reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 95 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    POR             shift and go to state 111
    DIVIDIDO        shift and go to state 112
    MODULO          shift and go to state 113


state 147

    (96) exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .
    (98) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (99) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DISTINTO        reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAS             reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOS           reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYOR           reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOR           reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    AND             reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    INTERROGACION   reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    OR              reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PARDER          reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    CORDER          reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    COMA            reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 96 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    POR             shift and go to state 111
    DIVIDIDO        shift and go to state 112
    MODULO          shift and go to state 113


state 148

    (90) exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    OR              reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PARDER          reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    CORDER          reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    COMA            reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 90 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106


state 149

    (91) exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    OR              reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PARDER          reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    CORDER          reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    COMA            reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 91 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106


state 150

    (92) exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    CORDER          reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 92 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106


state 151

    (93) exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .
    (95) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (96) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    CORDER          reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 93 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 105
    MENOS           shift and go to state 106


state 152

    (98) exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .

    POR             reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DIVIDIDO        reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MODULO          reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    EQUIVALENTE     reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DISTINTO        reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAS             reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOS           reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYOR           reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOR           reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYORIGUAL      reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENORIGUAL      reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    AND             reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    INTERROGACION   reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    OR              reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PUNTOCOMA       reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PARDER          reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    CORDER          reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    COMA            reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DOSPUNTOS       reduce using rule 98 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)


state 153

    (99) exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .

    POR             reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DIVIDIDO        reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MODULO          reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DISTINTO        reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAS             reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOS           reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYOR           reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOR           reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENORIGUAL      reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    AND             reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    INTERROGACION   reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    OR              reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PARDER          reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    CORDER          reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    COMA            reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 99 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)


state 154

    (100) exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .

    POR             reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DIVIDIDO        reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MODULO          reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DISTINTO        reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAS             reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOS           reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYOR           reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOR           reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENORIGUAL      reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    AND             reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    INTERROGACION   reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    OR              reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PARDER          reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    CORDER          reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    COMA            reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 100 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)


state 155

    (102) exp_Parentesis -> PARIZQ op_Ternario PARDER .

    POR             reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    DIVIDIDO        reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MODULO          reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    EQUIVALENTE     reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    DISTINTO        reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MAS             reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MENOS           reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MAYOR           reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MENOR           reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MAYORIGUAL      reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    MENORIGUAL      reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    AND             reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    INTERROGACION   reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    OR              reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    PUNTOCOMA       reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    PARDER          reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    CORDER          reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    COMA            reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)
    DOSPUNTOS       reduce using rule 102 (exp_Parentesis -> PARIZQ op_Ternario PARDER .)


state 156

    (110) valor -> TRUE PUNTO ID . PARIZQ PARDER

    PARIZQ          shift and go to state 183


state 157

    (119) valor -> ID CORIZQ op_Ternario . CORDER
    (120) valor -> ID CORIZQ op_Ternario . CORDER listaAccesos

    CORDER          shift and go to state 184


state 158

    (17) argumento_Funcion -> ID PUNTO ID . PARIZQ venir_Expresiones
    (18) accesoArgumento -> ID PUNTO ID .

    PARIZQ          shift and go to state 137
    POR             reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    DIVIDIDO        reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MODULO          reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    EQUIVALENTE     reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    DISTINTO        reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MAS             reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MENOS           reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MAYOR           reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MENOR           reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MAYORIGUAL      reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    MENORIGUAL      reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    AND             reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    INTERROGACION   reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    OR              reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    PUNTOCOMA       reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    PARDER          reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    CORDER          reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    COMA            reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)
    DOSPUNTOS       reduce using rule 18 (accesoArgumento -> ID PUNTO ID .)


state 159

    (111) valor -> FALSE PUNTO ID . PARIZQ PARDER

    PARIZQ          shift and go to state 185


state 160

    (117) valor -> CORIZQ lista_Expresiones CORDER .

    POR             reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    DIVIDIDO        reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MODULO          reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    EQUIVALENTE     reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    DISTINTO        reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MAS             reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MENOS           reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MAYOR           reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MENOR           reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MAYORIGUAL      reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    MENORIGUAL      reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    AND             reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    INTERROGACION   reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    OR              reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    PUNTOCOMA       reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    PARDER          reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    CORDER          reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    COMA            reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)
    DOSPUNTOS       reduce using rule 117 (valor -> CORIZQ lista_Expresiones CORDER .)


state 161

    (33) sSwitch -> SWITCH PARIZQ op_Ternario PARDER . LLAVIZQ listCases LLAVDER

    LLAVIZQ         shift and go to state 186


state 162

    (28) lista_Parametros -> ID . DOSPUNTOS tipo
    (30) lista_Parametros -> ID . DOSPUNTOS tipo CORIZQ CORDER

    DOSPUNTOS       shift and go to state 187


state 163

    (24) declaracion_Funcion -> FUNCTION ID PARIZQ parametros . tipoFuncion instrucciones LLAVDER
    (31) tipoFuncion -> . DOSPUNTOS tipo LLAVIZQ
    (32) tipoFuncion -> . LLAVIZQ

    DOSPUNTOS       shift and go to state 189
    LLAVIZQ         shift and go to state 190

    tipoFuncion                    shift and go to state 188

state 164

    (25) parametros -> PARDER .

    DOSPUNTOS       reduce using rule 25 (parametros -> PARDER .)
    LLAVIZQ         reduce using rule 25 (parametros -> PARDER .)


state 165

    (26) parametros -> lista_Parametros . PARDER
    (27) lista_Parametros -> lista_Parametros . COMA ID DOSPUNTOS tipo
    (29) lista_Parametros -> lista_Parametros . COMA ID DOSPUNTOS tipo CORIZQ CORDER

    PARDER          shift and go to state 191
    COMA            shift and go to state 192


state 166

    (73) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp . PARDER PUNTOCOMA
    (74) lista_exp -> lista_exp . COMA op_Ternario

    PARDER          shift and go to state 193
    COMA            shift and go to state 194


state 167

    (75) lista_exp -> op_Ternario .

    PARDER          reduce using rule 75 (lista_exp -> op_Ternario .)
    COMA            reduce using rule 75 (lista_exp -> op_Ternario .)


state 168

    (58) declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .

    CONSOLE         reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ID              reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    IF              reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    WHILE           reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FOR             reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONTINUE        reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    BREAK           reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    RETURN          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    SWITCH          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FUNCTION        reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    VAR             reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONST           reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    $end            reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    TYPEOF          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NOT             reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    PARIZQ          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    MENOS           reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ENTERO          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CADENA          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DECIMAL         reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CARACTER        reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    TRUE            reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FALSE           reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NULL            reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CORIZQ          reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    LLAVDER         reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CASE            reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DEFAULT         reduce using rule 58 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)


state 169

    (59) declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes . declaracion_explicita
    (61) lista_Corchetes -> lista_Corchetes . CORIZQ CORDER
    (63) declaracion_explicita -> . PUNTOCOMA
    (64) declaracion_explicita -> . IGUAL op_Ternario PUNTOCOMA

    CORIZQ          shift and go to state 196
    PUNTOCOMA       shift and go to state 170
    IGUAL           shift and go to state 171

    declaracion_explicita          shift and go to state 195

state 170

    (63) declaracion_explicita -> PUNTOCOMA .

    CONSOLE         reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    ID              reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    IF              reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    WHILE           reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    FOR             reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    CONTINUE        reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    BREAK           reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    RETURN          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    SWITCH          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    FUNCTION        reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    VAR             reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    CONST           reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    $end            reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    TYPEOF          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    NOT             reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    PARIZQ          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    MENOS           reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    ENTERO          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    CADENA          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    DECIMAL         reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    CARACTER        reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    TRUE            reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    FALSE           reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    NULL            reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    CORIZQ          reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    LLAVDER         reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    CASE            reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)
    DEFAULT         reduce using rule 63 (declaracion_explicita -> PUNTOCOMA .)


state 171

    (64) declaracion_explicita -> IGUAL . op_Ternario PUNTOCOMA
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 197
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 172

    (62) lista_Corchetes -> CORIZQ . CORDER

    CORDER          shift and go to state 198


state 173

    (65) declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    TYPEOF          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CORIZQ          reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 65 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)


state 174

    (55) listaAccesos -> CORIZQ . op_Ternario CORDER
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 199
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 175

    (52) asignacion -> ID CORIZQ op_Ternario CORDER IGUAL . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 200
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 176

    (53) asignacion -> ID CORIZQ op_Ternario CORDER listaAccesos . IGUAL op_Ternario
    (54) listaAccesos -> listaAccesos . CORIZQ op_Ternario CORDER

    IGUAL           shift and go to state 202
    CORIZQ          shift and go to state 201


state 177

    (22) lista_Expresiones -> lista_Expresiones COMA op_Ternario .

    PARDER          reduce using rule 22 (lista_Expresiones -> lista_Expresiones COMA op_Ternario .)
    COMA            reduce using rule 22 (lista_Expresiones -> lista_Expresiones COMA op_Ternario .)
    CORDER          reduce using rule 22 (lista_Expresiones -> lista_Expresiones COMA op_Ternario .)


state 178

    (17) argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .

    PUNTOCOMA       reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    POR             reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    DIVIDIDO        reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MODULO          reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    EQUIVALENTE     reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    DISTINTO        reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MAS             reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MENOS           reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MAYOR           reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MENOR           reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MAYORIGUAL      reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    MENORIGUAL      reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    AND             reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    INTERROGACION   reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    OR              reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    PARDER          reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    CORDER          reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    COMA            reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)
    DOSPUNTOS       reduce using rule 17 (argumento_Funcion -> ID PUNTO ID PARIZQ venir_Expresiones .)


state 179

    (44) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones sIf2
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 203
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 180

    (43) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 204
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 181

    (42) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA . asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS

    ID              shift and go to state 206

    asignacion                     shift and go to state 205

state 182

    (76) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS . exp_Or
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    exp_Or                         shift and go to state 207
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 183

    (110) valor -> TRUE PUNTO ID PARIZQ . PARDER

    PARDER          shift and go to state 208


state 184

    (119) valor -> ID CORIZQ op_Ternario CORDER .
    (120) valor -> ID CORIZQ op_Ternario CORDER . listaAccesos
    (54) listaAccesos -> . listaAccesos CORIZQ op_Ternario CORDER
    (55) listaAccesos -> . CORIZQ op_Ternario CORDER

    POR             reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    DIVIDIDO        reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MODULO          reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    EQUIVALENTE     reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    DISTINTO        reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MAS             reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MENOS           reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MAYOR           reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MENOR           reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MAYORIGUAL      reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    MENORIGUAL      reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    AND             reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    INTERROGACION   reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    OR              reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    PUNTOCOMA       reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    PARDER          reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    CORDER          reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    COMA            reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    DOSPUNTOS       reduce using rule 119 (valor -> ID CORIZQ op_Ternario CORDER .)
    CORIZQ          shift and go to state 174

    listaAccesos                   shift and go to state 209

state 185

    (111) valor -> FALSE PUNTO ID PARIZQ . PARDER

    PARDER          shift and go to state 210


state 186

    (33) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ . listCases LLAVDER
    (34) listCases -> . listCases CASE op_Ternario DOSPUNTOS instrucciones
    (35) listCases -> . listCases DEFAULT DOSPUNTOS instrucciones
    (36) listCases -> . CASE op_Ternario DOSPUNTOS instrucciones
    (37) listCases -> . DEFAULT DOSPUNTOS instrucciones

    CASE            shift and go to state 212
    DEFAULT         shift and go to state 213

    listCases                      shift and go to state 211

state 187

    (28) lista_Parametros -> ID DOSPUNTOS . tipo
    (30) lista_Parametros -> ID DOSPUNTOS . tipo CORIZQ CORDER
    (68) tipo -> . NUMBER
    (69) tipo -> . FLOAT
    (70) tipo -> . STRING
    (71) tipo -> . BOOLEAN
    (72) tipo -> . CHAR

    NUMBER          shift and go to state 126
    FLOAT           shift and go to state 127
    STRING          shift and go to state 128
    BOOLEAN         shift and go to state 129
    CHAR            shift and go to state 130

    tipo                           shift and go to state 214

state 188

    (24) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 215
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 189

    (31) tipoFuncion -> DOSPUNTOS . tipo LLAVIZQ
    (68) tipo -> . NUMBER
    (69) tipo -> . FLOAT
    (70) tipo -> . STRING
    (71) tipo -> . BOOLEAN
    (72) tipo -> . CHAR

    NUMBER          shift and go to state 126
    FLOAT           shift and go to state 127
    STRING          shift and go to state 128
    BOOLEAN         shift and go to state 129
    CHAR            shift and go to state 130

    tipo                           shift and go to state 216

state 190

    (32) tipoFuncion -> LLAVIZQ .

    CONSOLE         reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    ID              reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    IF              reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    WHILE           reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    FOR             reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    CONTINUE        reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    BREAK           reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    RETURN          reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    SWITCH          reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    FUNCTION        reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    VAR             reduce using rule 32 (tipoFuncion -> LLAVIZQ .)
    CONST           reduce using rule 32 (tipoFuncion -> LLAVIZQ .)


state 191

    (26) parametros -> lista_Parametros PARDER .

    DOSPUNTOS       reduce using rule 26 (parametros -> lista_Parametros PARDER .)
    LLAVIZQ         reduce using rule 26 (parametros -> lista_Parametros PARDER .)


state 192

    (27) lista_Parametros -> lista_Parametros COMA . ID DOSPUNTOS tipo
    (29) lista_Parametros -> lista_Parametros COMA . ID DOSPUNTOS tipo CORIZQ CORDER

    ID              shift and go to state 217


state 193

    (73) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 218


state 194

    (74) lista_exp -> lista_exp COMA . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 219
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 195

    (59) declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .

    CONSOLE         reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    ID              reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    IF              reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    WHILE           reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    FOR             reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    CONTINUE        reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    BREAK           reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    RETURN          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    SWITCH          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    FUNCTION        reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    VAR             reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    CONST           reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    $end            reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    TYPEOF          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    NOT             reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    PARIZQ          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    MENOS           reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    ENTERO          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    CADENA          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    DECIMAL         reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    CARACTER        reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    TRUE            reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    FALSE           reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    NULL            reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    CORIZQ          reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    LLAVDER         reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    CASE            reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)
    DEFAULT         reduce using rule 59 (declaracion -> tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita .)


state 196

    (61) lista_Corchetes -> lista_Corchetes CORIZQ . CORDER

    CORDER          shift and go to state 220


state 197

    (64) declaracion_explicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 221


state 198

    (62) lista_Corchetes -> CORIZQ CORDER .

    CORIZQ          reduce using rule 62 (lista_Corchetes -> CORIZQ CORDER .)
    PUNTOCOMA       reduce using rule 62 (lista_Corchetes -> CORIZQ CORDER .)
    IGUAL           reduce using rule 62 (lista_Corchetes -> CORIZQ CORDER .)


state 199

    (55) listaAccesos -> CORIZQ op_Ternario . CORDER

    CORDER          shift and go to state 222


state 200

    (52) asignacion -> ID CORIZQ op_Ternario CORDER IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 52 (asignacion -> ID CORIZQ op_Ternario CORDER IGUAL op_Ternario .)
    PARDER          reduce using rule 52 (asignacion -> ID CORIZQ op_Ternario CORDER IGUAL op_Ternario .)


state 201

    (54) listaAccesos -> listaAccesos CORIZQ . op_Ternario CORDER
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 223
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 202

    (53) asignacion -> ID CORIZQ op_Ternario CORDER listaAccesos IGUAL . op_Ternario
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 224
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 203

    (44) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . sIf2
    (2) instrucciones -> instrucciones . instruccion
    (45) sIf2 -> . LLAVDER ELSE sElse
    (46) sIf2 -> . LLAVDER
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         shift and go to state 226
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    sIf2                           shift and go to state 225
    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 204

    (43) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         shift and go to state 227
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 205

    (42) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 228


state 206

    (49) asignacion -> ID . IGUAL op_Ternario
    (50) asignacion -> ID . MAS IGUAL op_Ternario
    (51) asignacion -> ID . MENOS IGUAL op_Ternario
    (52) asignacion -> ID . CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> ID . CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> ID . MAS MAS
    (57) asignacion -> ID . MENOS MENOS

    IGUAL           shift and go to state 36
    MAS             shift and go to state 37
    MENOS           shift and go to state 38
    CORIZQ          shift and go to state 39


state 207

    (76) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .
    (79) exp_Or -> exp_Or . OR exp_And

    PUNTOCOMA       reduce using rule 76 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    PARDER          reduce using rule 76 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    CORDER          reduce using rule 76 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    COMA            reduce using rule 76 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    DOSPUNTOS       reduce using rule 76 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    OR              shift and go to state 98


state 208

    (110) valor -> TRUE PUNTO ID PARIZQ PARDER .

    POR             reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MODULO          reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    EQUIVALENTE     reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    DISTINTO        reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MAS             reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MENOS           reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MAYOR           reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MENOR           reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MAYORIGUAL      reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    MENORIGUAL      reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    AND             reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    INTERROGACION   reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    OR              reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    PUNTOCOMA       reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    PARDER          reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    CORDER          reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    COMA            reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)
    DOSPUNTOS       reduce using rule 110 (valor -> TRUE PUNTO ID PARIZQ PARDER .)


state 209

    (120) valor -> ID CORIZQ op_Ternario CORDER listaAccesos .
    (54) listaAccesos -> listaAccesos . CORIZQ op_Ternario CORDER

    POR             reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    DIVIDIDO        reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MODULO          reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    EQUIVALENTE     reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    DISTINTO        reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MAS             reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MENOS           reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MAYOR           reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MENOR           reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MAYORIGUAL      reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    MENORIGUAL      reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    AND             reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    INTERROGACION   reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    OR              reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    PUNTOCOMA       reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    PARDER          reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    CORDER          reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    COMA            reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    DOSPUNTOS       reduce using rule 120 (valor -> ID CORIZQ op_Ternario CORDER listaAccesos .)
    CORIZQ          shift and go to state 201


state 210

    (111) valor -> FALSE PUNTO ID PARIZQ PARDER .

    POR             reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MODULO          reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    EQUIVALENTE     reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    DISTINTO        reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MAS             reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MENOS           reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MAYOR           reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MENOR           reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MAYORIGUAL      reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    MENORIGUAL      reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    AND             reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    INTERROGACION   reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    OR              reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    PUNTOCOMA       reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    PARDER          reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    CORDER          reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    COMA            reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)
    DOSPUNTOS       reduce using rule 111 (valor -> FALSE PUNTO ID PARIZQ PARDER .)


state 211

    (33) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases . LLAVDER
    (34) listCases -> listCases . CASE op_Ternario DOSPUNTOS instrucciones
    (35) listCases -> listCases . DEFAULT DOSPUNTOS instrucciones

    LLAVDER         shift and go to state 229
    CASE            shift and go to state 230
    DEFAULT         shift and go to state 231


state 212

    (36) listCases -> CASE . op_Ternario DOSPUNTOS instrucciones
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 232
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 213

    (37) listCases -> DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 233


state 214

    (28) lista_Parametros -> ID DOSPUNTOS tipo .
    (30) lista_Parametros -> ID DOSPUNTOS tipo . CORIZQ CORDER

    PARDER          reduce using rule 28 (lista_Parametros -> ID DOSPUNTOS tipo .)
    COMA            reduce using rule 28 (lista_Parametros -> ID DOSPUNTOS tipo .)
    CORIZQ          shift and go to state 234


state 215

    (24) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         shift and go to state 235
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 216

    (31) tipoFuncion -> DOSPUNTOS tipo . LLAVIZQ

    LLAVIZQ         shift and go to state 236


state 217

    (27) lista_Parametros -> lista_Parametros COMA ID . DOSPUNTOS tipo
    (29) lista_Parametros -> lista_Parametros COMA ID . DOSPUNTOS tipo CORIZQ CORDER

    DOSPUNTOS       shift and go to state 237


state 218

    (73) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    ID              reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    IF              reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    WHILE           reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FOR             reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    BREAK           reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    RETURN          reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FUNCTION        reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    VAR             reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONST           reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    $end            reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CASE            reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 73 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)


state 219

    (74) lista_exp -> lista_exp COMA op_Ternario .

    PARDER          reduce using rule 74 (lista_exp -> lista_exp COMA op_Ternario .)
    COMA            reduce using rule 74 (lista_exp -> lista_exp COMA op_Ternario .)


state 220

    (61) lista_Corchetes -> lista_Corchetes CORIZQ CORDER .

    CORIZQ          reduce using rule 61 (lista_Corchetes -> lista_Corchetes CORIZQ CORDER .)
    PUNTOCOMA       reduce using rule 61 (lista_Corchetes -> lista_Corchetes CORIZQ CORDER .)
    IGUAL           reduce using rule 61 (lista_Corchetes -> lista_Corchetes CORIZQ CORDER .)


state 221

    (64) declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    TYPEOF          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CORIZQ          reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 64 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)


state 222

    (55) listaAccesos -> CORIZQ op_Ternario CORDER .

    IGUAL           reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    CORIZQ          reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    POR             reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    DIVIDIDO        reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MODULO          reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    EQUIVALENTE     reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    DISTINTO        reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MAS             reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MENOS           reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MAYOR           reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MENOR           reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MAYORIGUAL      reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    MENORIGUAL      reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    AND             reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    INTERROGACION   reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    OR              reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    PUNTOCOMA       reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    PARDER          reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    CORDER          reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    COMA            reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)
    DOSPUNTOS       reduce using rule 55 (listaAccesos -> CORIZQ op_Ternario CORDER .)


state 223

    (54) listaAccesos -> listaAccesos CORIZQ op_Ternario . CORDER

    CORDER          shift and go to state 238


state 224

    (53) asignacion -> ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 53 (asignacion -> ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario .)
    PARDER          reduce using rule 53 (asignacion -> ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario .)


state 225

    (44) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .

    CONSOLE         reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    ID              reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    IF              reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    WHILE           reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FOR             reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONTINUE        reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    BREAK           reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    RETURN          reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    SWITCH          reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FUNCTION        reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    VAR             reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONST           reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    $end            reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    LLAVDER         reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CASE            reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    DEFAULT         reduce using rule 44 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)


state 226

    (45) sIf2 -> LLAVDER . ELSE sElse
    (46) sIf2 -> LLAVDER .

    ELSE            shift and go to state 239
    CONSOLE         reduce using rule 46 (sIf2 -> LLAVDER .)
    ID              reduce using rule 46 (sIf2 -> LLAVDER .)
    IF              reduce using rule 46 (sIf2 -> LLAVDER .)
    WHILE           reduce using rule 46 (sIf2 -> LLAVDER .)
    FOR             reduce using rule 46 (sIf2 -> LLAVDER .)
    CONTINUE        reduce using rule 46 (sIf2 -> LLAVDER .)
    BREAK           reduce using rule 46 (sIf2 -> LLAVDER .)
    RETURN          reduce using rule 46 (sIf2 -> LLAVDER .)
    SWITCH          reduce using rule 46 (sIf2 -> LLAVDER .)
    FUNCTION        reduce using rule 46 (sIf2 -> LLAVDER .)
    VAR             reduce using rule 46 (sIf2 -> LLAVDER .)
    CONST           reduce using rule 46 (sIf2 -> LLAVDER .)
    $end            reduce using rule 46 (sIf2 -> LLAVDER .)
    LLAVDER         reduce using rule 46 (sIf2 -> LLAVDER .)
    CASE            reduce using rule 46 (sIf2 -> LLAVDER .)
    DEFAULT         reduce using rule 46 (sIf2 -> LLAVDER .)


state 227

    (43) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 43 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)


state 228

    (42) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 240


state 229

    (33) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .

    CONSOLE         reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    ID              reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    IF              reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    WHILE           reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FOR             reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONTINUE        reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    BREAK           reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    RETURN          reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    SWITCH          reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FUNCTION        reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    VAR             reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONST           reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    $end            reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    LLAVDER         reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CASE            reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    DEFAULT         reduce using rule 33 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)


state 230

    (34) listCases -> listCases CASE . op_Ternario DOSPUNTOS instrucciones
    (76) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (77) op_Ternario -> . exp_Or
    (78) op_Ternario -> . TYPEOF op_Ternario
    (79) exp_Or -> . exp_Or OR exp_And
    (80) exp_Or -> . exp_And
    (81) exp_And -> . exp_And AND exp_Not
    (82) exp_And -> . exp_Not
    (83) exp_Not -> . lNot exp_Comp
    (84) exp_Not -> . exp_Comp
    (85) lNot -> . lNot NOT
    (86) lNot -> . NOT
    (87) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (88) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (89) exp_Comp -> . exp_rel
    (95) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (96) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (97) exp_Sum_Menos -> . exp_Mul_Div
    (90) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (91) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (92) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (93) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (94) exp_rel -> . exp_Sum_Menos
    (98) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (99) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (100) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (101) exp_Mul_Div -> . exp_Parentesis
    (102) exp_Parentesis -> . PARIZQ op_Ternario PARDER
    (103) exp_Parentesis -> . exp_Negativo
    (104) exp_Negativo -> . MENOS valor
    (105) exp_Negativo -> . valor
    (106) valor -> . ENTERO
    (107) valor -> . CADENA
    (108) valor -> . DECIMAL
    (109) valor -> . CARACTER
    (110) valor -> . TRUE PUNTO ID PARIZQ PARDER
    (111) valor -> . FALSE PUNTO ID PARIZQ PARDER
    (112) valor -> . TRUE
    (113) valor -> . FALSE
    (114) valor -> . NULL
    (115) valor -> . ID
    (116) valor -> . callFuncion
    (117) valor -> . CORIZQ lista_Expresiones CORDER
    (118) valor -> . CORIZQ CORDER
    (119) valor -> . ID CORIZQ op_Ternario CORDER
    (120) valor -> . ID CORIZQ op_Ternario CORDER listaAccesos
    (121) valor -> . argumento_Funcion
    (122) valor -> . accesoArgumento
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (18) accesoArgumento -> . ID PUNTO ID

    TYPEOF          shift and go to state 50
    NOT             shift and go to state 55
    PARIZQ          shift and go to state 61
    MENOS           shift and go to state 59
    ENTERO          shift and go to state 64
    CADENA          shift and go to state 65
    DECIMAL         shift and go to state 66
    CARACTER        shift and go to state 67
    TRUE            shift and go to state 68
    FALSE           shift and go to state 70
    NULL            shift and go to state 71
    ID              shift and go to state 69
    CORIZQ          shift and go to state 73

    op_Ternario                    shift and go to state 241
    exp_Or                         shift and go to state 49
    exp_And                        shift and go to state 51
    exp_Not                        shift and go to state 52
    lNot                           shift and go to state 53
    exp_Comp                       shift and go to state 54
    exp_Sum_Menos                  shift and go to state 56
    exp_rel                        shift and go to state 57
    exp_Mul_Div                    shift and go to state 58
    exp_Parentesis                 shift and go to state 60
    exp_Negativo                   shift and go to state 62
    valor                          shift and go to state 63
    callFuncion                    shift and go to state 72
    argumento_Funcion              shift and go to state 74
    accesoArgumento                shift and go to state 75

state 231

    (35) listCases -> listCases DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 242


state 232

    (36) listCases -> CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 243


state 233

    (37) listCases -> DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 244
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 234

    (30) lista_Parametros -> ID DOSPUNTOS tipo CORIZQ . CORDER

    CORDER          shift and go to state 245


state 235

    (24) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .

    CONSOLE         reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    ID              reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    IF              reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    WHILE           reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    FOR             reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CONTINUE        reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    BREAK           reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    RETURN          reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    SWITCH          reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    FUNCTION        reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    VAR             reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CONST           reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    $end            reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    LLAVDER         reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CASE            reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    DEFAULT         reduce using rule 24 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)


state 236

    (31) tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .

    CONSOLE         reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    ID              reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    IF              reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    WHILE           reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    FOR             reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    CONTINUE        reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    BREAK           reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    RETURN          reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    SWITCH          reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    FUNCTION        reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    VAR             reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    CONST           reduce using rule 31 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)


state 237

    (27) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS . tipo
    (29) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS . tipo CORIZQ CORDER
    (68) tipo -> . NUMBER
    (69) tipo -> . FLOAT
    (70) tipo -> . STRING
    (71) tipo -> . BOOLEAN
    (72) tipo -> . CHAR

    NUMBER          shift and go to state 126
    FLOAT           shift and go to state 127
    STRING          shift and go to state 128
    BOOLEAN         shift and go to state 129
    CHAR            shift and go to state 130

    tipo                           shift and go to state 246

state 238

    (54) listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .

    IGUAL           reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    CORIZQ          reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    POR             reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    DIVIDIDO        reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MODULO          reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    EQUIVALENTE     reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    DISTINTO        reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MAS             reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MENOS           reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MAYOR           reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MENOR           reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MAYORIGUAL      reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    MENORIGUAL      reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    AND             reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    INTERROGACION   reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    OR              reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    PUNTOCOMA       reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    PARDER          reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    CORDER          reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    COMA            reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)
    DOSPUNTOS       reduce using rule 54 (listaAccesos -> listaAccesos CORIZQ op_Ternario CORDER .)


state 239

    (45) sIf2 -> LLAVDER ELSE . sElse
    (47) sElse -> . LLAVIZQ instrucciones LLAVDER
    (48) sElse -> . sIf
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 248
    IF              shift and go to state 20

    sElse                          shift and go to state 247
    sIf                            shift and go to state 249

state 240

    (42) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instrucciones                  shift and go to state 250
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 241

    (34) listCases -> listCases CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 251


state 242

    (35) listCases -> listCases DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 252
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 243

    (36) listCases -> CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 253
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 244

    (37) listCases -> DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         reduce using rule 37 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 37 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 37 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 245

    (30) lista_Parametros -> ID DOSPUNTOS tipo CORIZQ CORDER .

    PARDER          reduce using rule 30 (lista_Parametros -> ID DOSPUNTOS tipo CORIZQ CORDER .)
    COMA            reduce using rule 30 (lista_Parametros -> ID DOSPUNTOS tipo CORIZQ CORDER .)


state 246

    (27) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .
    (29) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo . CORIZQ CORDER

    PARDER          reduce using rule 27 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .)
    COMA            reduce using rule 27 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .)
    CORIZQ          shift and go to state 254


state 247

    (45) sIf2 -> LLAVDER ELSE sElse .

    CONSOLE         reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    ID              reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    IF              reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    WHILE           reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    FOR             reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    CONTINUE        reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    BREAK           reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    RETURN          reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    SWITCH          reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    FUNCTION        reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    VAR             reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    CONST           reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    $end            reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    LLAVDER         reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    CASE            reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)
    DEFAULT         reduce using rule 45 (sIf2 -> LLAVDER ELSE sElse .)


state 248

    (47) sElse -> LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 255
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 249

    (48) sElse -> sIf .

    CONSOLE         reduce using rule 48 (sElse -> sIf .)
    ID              reduce using rule 48 (sElse -> sIf .)
    IF              reduce using rule 48 (sElse -> sIf .)
    WHILE           reduce using rule 48 (sElse -> sIf .)
    FOR             reduce using rule 48 (sElse -> sIf .)
    CONTINUE        reduce using rule 48 (sElse -> sIf .)
    BREAK           reduce using rule 48 (sElse -> sIf .)
    RETURN          reduce using rule 48 (sElse -> sIf .)
    SWITCH          reduce using rule 48 (sElse -> sIf .)
    FUNCTION        reduce using rule 48 (sElse -> sIf .)
    VAR             reduce using rule 48 (sElse -> sIf .)
    CONST           reduce using rule 48 (sElse -> sIf .)
    $end            reduce using rule 48 (sElse -> sIf .)
    LLAVDER         reduce using rule 48 (sElse -> sIf .)
    CASE            reduce using rule 48 (sElse -> sIf .)
    DEFAULT         reduce using rule 48 (sElse -> sIf .)


state 250

    (42) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         shift and go to state 256
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 251

    (34) listCases -> listCases CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instrucciones                  shift and go to state 257
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 252

    (35) listCases -> listCases DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         reduce using rule 35 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 35 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 35 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 253

    (36) listCases -> CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         reduce using rule 36 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 36 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 36 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 254

    (29) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo CORIZQ . CORDER

    CORDER          shift and go to state 258


state 255

    (47) sElse -> LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         shift and go to state 259
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 256

    (42) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 42 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)


state 257

    (34) listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (16) instruccion -> . argumento_Funcion PUNTOCOMA
    (73) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (58) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (59) declaracion -> . tipoVar ID DOSPUNTOS tipo lista_Corchetes declaracion_explicita
    (60) declaracion -> . tipoVar ID declaracion_implicita
    (49) asignacion -> . ID IGUAL op_Ternario
    (50) asignacion -> . ID MAS IGUAL op_Ternario
    (51) asignacion -> . ID MENOS IGUAL op_Ternario
    (52) asignacion -> . ID CORIZQ op_Ternario CORDER IGUAL op_Ternario
    (53) asignacion -> . ID CORIZQ op_Ternario CORDER listaAccesos IGUAL op_Ternario
    (56) asignacion -> . ID MAS MAS
    (57) asignacion -> . ID MENOS MENOS
    (44) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (43) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (42) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) sContinue -> . CONTINUE PUNTOCOMA
    (39) sBreak -> . BREAK PUNTOCOMA
    (40) sReturn -> . RETURN PUNTOCOMA
    (41) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (33) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (24) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (19) callFuncion -> . ID PARIZQ venir_Expresiones
    (17) argumento_Funcion -> . ID PUNTO ID PARIZQ venir_Expresiones
    (66) tipoVar -> . VAR
    (67) tipoVar -> . CONST

    LLAVDER         reduce using rule 34 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 34 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 34 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    FOR             shift and go to state 22
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    RETURN          shift and go to state 25
    SWITCH          shift and go to state 26
    FUNCTION        shift and go to state 27
    VAR             shift and go to state 28
    CONST           shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    argumento_Funcion              shift and go to state 16
    tipoVar                        shift and go to state 18

state 258

    (29) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo CORIZQ CORDER .

    PARDER          reduce using rule 29 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo CORIZQ CORDER .)
    COMA            reduce using rule 29 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo CORIZQ CORDER .)


state 259

    (47) sElse -> LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 47 (sElse -> LLAVIZQ instrucciones LLAVDER .)

